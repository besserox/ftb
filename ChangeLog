2009-01-20 03:10  rgupta

	* [r644] ., components/examples: Committing svn ignore properties

2009-01-20 03:08  rgupta

	* [r643] components/examples/ftb_alltoall.c,
	  components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_grouping.c,
	  components/examples/ftb_ib_port_status_publisher.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c: Fixed memset errors and
	  formatting errors (Ticket #40)

2009-01-20 02:33  rgupta

	* [r642] components/examples/ftb_notify_logger.c,
	  components/examples/ftb_polling_logger.c: Formatted polling and
	  notify logger output (Ticket #41)

2009-01-20 02:27  rgupta

	* [r641] components/examples/ftb_pingpong.c: Corrected input usage
	  and input parameter validation (Ticket #42) for FTB pingpong
	  example

2009-01-20 01:21  rgupta

	* [r640] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  Fixed socket leak (by closing open sockets) left opened by failed
	  socketcall functions

2009-01-20 01:00  rgupta

	* [r639] components/examples/ftb_alltoall.c,
	  components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_grouping.c,
	  components/examples/ftb_ib_port_status_publisher.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/ftb_manager_lib.h, include/libftb.h,
	  src/agent/ftb_agent.c, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bg/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgl.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgp.h,
	  src/client_lib/platforms/bg/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c, src/include/ftb_auxil.h,
	  src/include/ftb_util.h, src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/include/ftb_network.h,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_auxil.c, src/util/ftb_util.c: Whitespace and
	  formatting changes in this revision. Ignore for now.

2009-01-19 23:59  rgupta

	* [r638] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  Bug Fix: FTB_Disconnect() did not close the TCP socket opened by
	  FTB_Connect. It does so now.

2009-01-19 23:08  rgupta

	* [r637] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  Bug fix to close socket opened by FTB Connect call across exec

2008-10-02 20:44  rgupta

	* [r596] components/examples/ftb_alltoall.c,
	  components/examples/ftb_grouping.c: Changed NUM_EVENTS value in
	  ftb_grouping.c
	  Doc fixes in ftb_alltoall

2008-10-02 20:26  rgupta

	* [r594] components/examples/ftb_grouping.c: Adding grouping
	  benchmark

2008-10-02 16:43  rgupta

	* [r591] components/examples/ftb_grouping.c: New benchmark
	  ftb_grouping

2008-10-02 16:43  rgupta

	* [r590] components/examples/Makefile.in: New benchmark
	  ftb_grouping and makefile

2008-10-02 15:35  rgupta

	* [r587] components/examples/ftb_alltoall.c,
	  components/examples/ftb_throw_delay_mpi.c, src/agent/ftb_agent.c,
	  src/manager_lib/ftb_manager_lib.c: 1. One small buf fix in
	  Register_subscription func()
	  2. Agent is nor forked as a child
	  3. changed some benchmarks

2008-10-01 20:29  rgupta

	* [r586] components/examples/ftb_alltoall.c: Adding alltoall
	  example

2008-10-01 20:28  rgupta

	* [r585] components/examples/Makefile.in,
	  components/examples/ftb_pingpong.c,
	  src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_util.c: 1. Added some comments to the code in
	  ftb_client_lib.c
	  2. Made some log messages more coherent.
	  3. Fixed a bug in Subscrieb_Register - the ftb agents would
	  sometimes not propagate subscription masks from clients which
	  registered with the exact same mask that was already in their
	  catch map. Hence, some clients never got their event. This bug
	  first became know during the alltoall program. Its fixed now

2008-09-30 15:31  rgupta

	* [r581] src/client_lib/ftb_client_lib.c, src/include/ftb_util.h,
	  src/manager_lib/ftb_manager_lib.c, src/util/ftb_util.c: This is a
	  bug BugFix:
	  
	  Symptom: Sometimes a relevant event does not get polled/put in
	  the polling queue. Sometimes, 'mask already registered' error is
	  reported during FTB_Subscribe
	  
	  Fix: This was because the event_queue map was based on comparison
	  of two events and not two masks.

2008-09-30 07:05  rgupta

	* [r580] ., components, components/examples, docs, docs/chapters,
	  docs/chapters/bg_sample_files, include, misc, misc/maint_code,
	  src, src/agent, src/client_lib, src/client_lib/include,
	  src/client_lib/platforms, src/client_lib/platforms/bg,
	  src/client_lib/platforms/bg/init_scripts,
	  src/client_lib/platforms/bg/zoid_client,
	  src/client_lib/platforms/bg/zoid_client/client,
	  src/client_lib/platforms/bg/zoid_client/implementation,
	  src/client_lib/platforms/bg/zoid_client/server,
	  src/client_lib/platforms/linux, src/include, src/manager_lib,
	  src/manager_lib/include, src/manager_lib/lib,
	  src/manager_lib/lib/shared, src/manager_lib/lib/static,
	  src/manager_lib/network, src/manager_lib/network/include,
	  src/manager_lib/network/network_sock,
	  src/manager_lib/network/network_sock/include, src/util: Added
	  some more svn ignores.

2008-09-30 07:02  rgupta

	* [r579] ., components, components/examples, docs, docs/chapters,
	  docs/chapters/bg_sample_files, include, misc, misc/maint_code,
	  src, src/agent, src/client_lib, src/client_lib/include,
	  src/client_lib/platforms, src/client_lib/platforms/bg,
	  src/client_lib/platforms/bg/init_scripts,
	  src/client_lib/platforms/bg/zoid_client,
	  src/client_lib/platforms/bg/zoid_client/client,
	  src/client_lib/platforms/bg/zoid_client/implementation,
	  src/client_lib/platforms/bg/zoid_client/server,
	  src/client_lib/platforms/linux, src/include, src/manager_lib,
	  src/manager_lib/include, src/manager_lib/lib,
	  src/manager_lib/lib/shared, src/manager_lib/lib/static,
	  src/manager_lib/network, src/manager_lib/network/include,
	  src/manager_lib/network/network_sock,
	  src/manager_lib/network/network_sock/include, src/util:
	  Committing svn ignore properties for the directories. It's quite
	  simple right now, but needs to be beefed up.

2008-09-30 07:00  rgupta

	* [r578] components/examples/ftb_polling_logger.c,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c: Minor
	  documentation fixes.

2008-09-30 04:01  rgupta

	* [r577] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  Get the non-loopback address.

2008-09-29 00:13  rgupta

	* [r574] components/examples/ftb_watchdog.c,
	  docs/chapters/01_FTB_For_BlueGenes.txt,
	  src/client_lib/ftb_client_lib.c, src/util/ftb_util.c: 1. Readded
	  using client name as a wild card during subscribing
	  2. Rem0ved restriction for program to exit, if a duplicate (same
	  region,
	  comp cat, comp name) event is being declared -- this is needed to
	  make
	  it work on BGP in some conditions

2008-09-26 18:00  rgupta

	* [r573] docs/chapters/01_FTB_For_BlueGenes.txt: Added 'make' after
	  zoid download for BG/P

2008-09-15 14:37  shet

	* [r568] docs/chapters/01_FTB_on_Cray.txt: Corrected file name for
	  Linux setup from 03_... to 01_...

2008-09-12 20:15  gopalakk

	* [r565] components/examples/Makefile.in,
	  components/examples/ftb_ringtest.c,
	  components/examples/ftb_throw_loop.c: Removed the
	  ftb_throw_loop.c and ftb_ringtest.c examples.

2008-09-11 17:52  gopalakk

	* [r562] components/examples/Makefile.in,
	  components/examples/ftb_ringtest.c,
	  components/examples/ftb_throw_loop.c,
	  docs/chapters/01_FTB_For_BlueGenes.txt,
	  src/client_lib/platforms/bg/init_scripts/ftb_agent,
	  src/client_lib/platforms/bg/init_scripts/ftb_agent_bgl,
	  src/client_lib/platforms/bg/init_scripts/ftb_agent_bgp: - Added
	  FTB examples ftb_throw_loop.c and ftb_ringtest.c
	  - Renamed FTB Agent startup scripts for BG/L and BG/P
	  - Corrections to FTB BG documentation

2008-09-04 00:45  rgupta

	* [r556] src/client_lib/platforms/bg/zoid_client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/server/Makefile.in:
	  Removed ZeptoOs license references

2008-09-04 00:18  rgupta

	* [r552] misc/license.BSD: Change to ANL license

2008-09-04 00:08  rgupta

	* [r550] docs/chapters/02_TroubleShooting.txt: added another
	  question

2008-09-03 23:53  rgupta

	* [r549] include/README: adding readme

2008-09-03 23:52  rgupta

	* [r548] src/README: readme added

2008-09-03 23:47  rgupta

	* [r547] docs/chapters/01_FTB_on_Linux.txt: minor doc change

2008-09-03 20:39  rgupta

	* [r546] docs/chapters/02_TroubleShooting.txt,
	  docs/chapters/04_TroubleShooting: file name change

2008-09-03 20:37  rgupta

	* [r545] README: minor doc changes

2008-09-03 20:33  rgupta

	* [r544] Known_Bugs: minor doc change

2008-09-03 20:31  rgupta

	* [r543] README, docs/chapters/01_FTB_For_BlueGenes.txt,
	  docs/chapters/01_FTB_on_Cray.txt,
	  docs/chapters/01_FTB_on_Linux.txt, docs/chapters/01_Intro.txt,
	  docs/chapters/02_Getting_Started.txt,
	  docs/chapters/03_FTB_For_BlueGenes.txt,
	  docs/chapters/03_FTB_on_Crays.txt,
	  docs/chapters/03_FTB_on_Linux.txt: More doc files

2008-09-03 20:19  rgupta

	* [r542] misc/maint_code/mkdistro: changes for local environment

2008-09-03 19:44  rgupta

	* [r541] docs/chapters/03_FTB_For_BlueGenes.txt,
	  docs/chapters/03_FTB_on_Crays.txt,
	  docs/chapters/03_FTB_on_Linux.txt: More doc files

2008-09-03 17:17  rgupta

	* [r540] README, README.bg_series, docs/README,
	  docs/bg_setup_env.README, docs/bgl_setup_env.sample,
	  docs/bgp_setup_env.sample, docs/chapters,
	  docs/chapters/01_Intro.txt, docs/chapters/02_Getting_Started.txt,
	  docs/chapters/03_FTB_For_BlueGenes.txt,
	  docs/chapters/03_FTB_on_Linux.txt,
	  docs/chapters/04_TroubleShooting, docs/chapters/bg_sample_files,
	  docs/chapters/bg_sample_files/bg_setup_env.README,
	  docs/chapters/bg_sample_files/bgl_setup_env.sample,
	  docs/chapters/bg_sample_files/bgp_setup_env.sample, install.sh:
	  Documentation changes

2008-09-03 17:16  rgupta

	* [r539] misc/license.BSD: LBNL change

2008-09-03 15:30  rgupta

	* [r538] docs/ftb_developers_guide.pdf: Adding update developers
	  guide

2008-09-03 15:25  rgupta

	* [r536] docs/ftb_developers_guide.pdf: Adding developers guide

2008-09-03 15:20  rgupta

	* [r535] misc/maint_code/code-cleanup.sh: Added version comment

2008-09-03 15:04  rgupta

	* [r534] misc/license.BSD: Updated license file

2008-09-03 14:41  rgupta

	* [r533] misc/maint_code/code-cleanup.sh: Adding script to indent
	  the code

2008-09-03 06:23  rgupta

	* [r532] misc/maint_code/phbsrcfix: Removed the modification used
	  for Makefiles

2008-09-03 06:06  rgupta

	* [r531] LICENSE: Deleted License files

2008-09-03 06:05  rgupta

	* [r530] misc/maint_code/getfiles.sh, misc/maint_code/mkdistro:
	  Added some more maintainence files

2008-09-03 05:53  rgupta

	* [r529] Makefile.in, autogen.sh, components/Makefile.in,
	  components/autogen.sh, components/configure.in,
	  components/examples/Makefile.in,
	  components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_ib_port_status_publisher.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, configure.in,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/ftb_manager_lib.h, include/libftb.h, misc/license.GPL,
	  misc/license.LGPL, misc/maint_code/ftb-bsd, src/Makefile.in,
	  src/agent/Makefile.in, src/agent/ftb_agent.c,
	  src/client_lib/Makefile.in, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/Makefile.in,
	  src/client_lib/platforms/bg/Makefile.in,
	  src/client_lib/platforms/bg/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bg/init_scripts/ftb_agent,
	  src/client_lib/platforms/bg/zoid_client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgl.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgp.h,
	  src/client_lib/platforms/bg/zoid_client/implementation/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/bg/zoid_client/server/Makefile.in,
	  src/client_lib/platforms/linux/Makefile.in,
	  src/client_lib/platforms/linux/libftb.c, src/include/ftb_auxil.h,
	  src/include/ftb_util.h, src/manager_lib/Makefile.in,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/include/ftb_network.h,
	  src/manager_lib/network/network_sock/Makefile.in,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/Makefile.in, src/util/ftb_auxil.c, src/util/ftb_util.c:
	  Added license information in all files

2008-09-03 05:19  rgupta

	* [r528] misc/license.BSD: Added BSD license
	  
	  A license.BSD

2008-09-03 05:08  rgupta

	* [r527] misc/maint_code, misc/maint_code/README,
	  misc/maint_code/ftb-bsd, misc/maint_code/ftb-fillin,
	  misc/maint_code/ftb-info, misc/maint_code/mkdistro,
	  misc/maint_code/phbsrcfix: Added maintainence code files. Also
	  created a directory for the same.

2008-09-02 18:02  rgupta

	* [r526] misc/license.GPL, misc/license.LGPL: Changing to GPL/LGPL
	  v2.0

2008-09-02 17:09  rgupta

	* [r525] src/client_lib/ftb_client_lib.c: I thought the below was a
	  bug and committed a fix in revision 505. It turned out this is
	  not a bug, so reverting to original fix

2008-09-02 16:24  rgupta

	* [r524] misc/license.GPL, misc/license.LGPL: Moving to GPL/LGPL
	  version 3.0

2008-09-02 16:16  rgupta

	* [r523] LICENSE, docs/README, misc, misc/license.GPL,
	  misc/license.LGPL: Added Licensing details.

2008-09-02 16:06  rgupta

	* [r522] ChangeLog: Adding Changelog placeholder

2008-08-21 21:17  rgupta

	* [r510] Known_Bugs: Updated Known Bugs file

2008-08-21 21:10  rgupta

	* [r509] src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c: 1. Fixed
	  the following known bug:
	  --- Agent may throw the following warning when a client exits
	  ---[FTB_WARNING][ftb_manager_lib.c: line 791]FTBN_Recv_msg failed
	  -20
	  ---[FTB_WARNING][ftb_agent.c: line 34]FTBM_Wait failed -20
	  
	  2. Put a FIXME comment for the ioctl section of the code

2008-08-21 18:16  rgupta

	* [r508] components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_ib_port_status_publisher.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/ftb_manager_lib.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/platforms/bg/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgl.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgp.h,
	  src/include/ftb_auxil.h, src/include/ftb_util.h,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/include/ftb_network.h,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_auxil.c, src/util/ftb_util.c: 1. Formatted some more
	  code.
	  2. Resolved a small bug in ftb_network_tcp.c

2008-08-20 21:17  rgupta

	* [r507] README.bg_series: Adding README.bg_series

2008-08-20 21:17  rgupta

	* [r506] README, configure.in: Updated the README
	  Made minor modifications to configure.in

2008-08-20 20:15  rgupta

	* [r505] src/client_lib/ftb_client_lib.c: Small bug that was
	  returnig a wrong return value instead of
	  FTB_ERR_SUBSCRIPTION_STR;

2008-08-20 20:04  rgupta

	* [r504] components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_ib_port_status_publisher.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c: Formatted the examples.

2008-08-20 19:27  rgupta

	* [r503] autogen.sh: Formatted autogen.sh

2008-08-20 19:27  rgupta

	* [r502] src/agent/ftb_agent.c: Formatted ftb_agent.c

2008-08-20 19:24  rgupta

	* [r501] include/libftb.h: Formatted libftb.h

2008-08-20 19:22  rgupta

	* [r500] include/ftb_manager_lib.h: Formatted ftb_manager_lib.h

2008-08-20 19:21  rgupta

	* [r499] include/ftb_def.h: Formatted ftb_def.h

2008-08-20 19:20  rgupta

	* [r498] include/ftb_client_lib_defs.h: Formatted
	  ftb_client_lib_defs.h

2008-08-20 19:17  rgupta

	* [r497]
	  src/client_lib/platforms/bg/zoid_client/implementation/ftb_zoid_client.c:
	  Formatted ftb_zoid_client.c

2008-08-20 19:16  rgupta

	* [r496]
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgl.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgp.h:
	  Formatted ftb_zoid_client_bgl.h, ftb_zoid_client_bgp.h

2008-08-20 19:13  rgupta

	* [r495] src/client_lib/platforms/bg/ftb_zoid_wrapper.c: Formatted
	  ftb_zoid_wrapper.c

2008-08-20 19:10  rgupta

	* [r494] src/client_lib/platforms/linux/libftb.c: Formatted
	  libftb.c

2008-08-20 19:07  rgupta

	* [r493] src/client_lib/include/ftb_client_lib.h: Formatted
	  ftb_client_lib.h

2008-08-20 19:05  rgupta

	* [r492] src/client_lib/ftb_client_lib.c: Formatted
	  ftb_client_lib.c

2008-08-20 19:04  rgupta

	* [r491] src/manager_lib/ftb_manager_lib.c: Fixed comment bug

2008-08-20 18:56  rgupta

	* [r490] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  removed printf statement

2008-08-20 18:54  rgupta

	* [r489] src/include/ftb_auxil.h, src/include/ftb_util.h: Formatted
	  ftb_auxil.h and ftb_util.h

2008-08-20 18:48  rgupta

	* [r488] src/manager_lib/ftb_manager_lib.c: Formatted
	  ftb_manager_lib.c

2008-08-20 18:43  rgupta

	* [r487] src/manager_lib/network/include/ftb_network.h: Formatted
	  ftb_network.h

2008-08-20 18:40  rgupta

	* [r486]
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h:
	  Formatted ftb_network_sock.h

2008-08-20 16:36  rgupta

	* [r485] src/manager_lib/network/network_sock/ftb_network_tcp.c:
	  Formatted ftb_network_tcp.c

2008-08-20 16:35  rgupta

	* [r484] src/manager_lib/network/network_sock/ftb_bootstrap_udp.c:
	  Formatted ftb_bootstrap_udp.c

2008-08-20 16:31  rgupta

	* [r483]
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c:
	  Formatting changes to ftb_database_server.c

2008-08-20 03:10  rgupta

	* [r482] src/manager_lib/ftb_manager_lib.c: Formatting changes to
	  ftb_manager_lib.c

2008-08-20 02:58  rgupta

	* [r481] src/util/ftb_util.c: Formatting changes to ftb_util.c

2008-08-20 02:19  rgupta

	* [r480] src/util/ftb_auxil.c: Cleaned up ftb_auxil.c

2008-08-19 19:56  rgupta

	* [r479] configure.in,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h:
	  Cleaned up some code to remove extra variables

2008-08-19 01:15  rgupta

	* [r478] configure.in: Removed boot-strap dependency from
	  configure.in

2008-08-18 23:02  rgupta

	* [r477] components/examples/ftb_notify_logger.c, configure.in,
	  include/libftb.h,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h:
	  Added logic to specify bootstrap server, agent port and bootstrap
	  port through environment variable or config file.

2008-07-29 21:21  gopalakk

	* [r476] README, configure.in, docs/bg_setup_env.README: Updated
	  the README files and configure script to provide information
	  about building FTB on BGP.

2008-07-29 19:47  gopalakk

	* [r475] bg_setup_env, bgl_setup_env, components/configure.in,
	  configure.in, docs/bgl_setup_env.sample,
	  docs/bgp_setup_env.sample,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgl.h,
	  src/client_lib/platforms/bg/zoid_client/ftb_zoid_client_bgp.h:
	  Enable support for BG/P
	  - Renamed bgl_setup_env to bg_setup_env
	  - Added sample env files for BG/L & BG/P under the docs directory
	  - Changed ftb_zoid_client.h to ftb_zoid_client_bgl.h &
	  ftb_zoid_client_bgp.h

2008-07-29 19:14  gopalakk

	* [r474] Makefile.in, bgl_setup_env, components/Makefile.in,
	  components/configure.in, components/examples/Makefile.in,
	  configure.in, include/config.h.in, src/Makefile.in,
	  src/agent/Makefile.in, src/agent/ftb_agent.c,
	  src/client_lib/Makefile.in, src/client_lib/platforms/Makefile.in,
	  src/client_lib/platforms/bg,
	  src/client_lib/platforms/bg/Makefile.in,
	  src/client_lib/platforms/bg/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bg/zoid_client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/client/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/implementation/Makefile.in,
	  src/client_lib/platforms/bg/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/bg/zoid_client/server/Makefile.in,
	  src/client_lib/platforms/bgl,
	  src/client_lib/platforms/linux/Makefile.in,
	  src/manager_lib/Makefile.in,
	  src/manager_lib/network/network_sock/Makefile.in,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/util/Makefile.in, src/util/ftb_util.c: Enable support for
	  BG/P.
	  - The platforms/bgl directory has been renamed to platforms/bg,
	  since
	  support for BGP has been added.
	  - The FTB Watchdog program will now be compiled for BGP.
	  - Note: This commit will break the build, since certain files
	  under
	  platforms/bg have not been renamed. The next commit will fix
	  this.

2008-07-21 18:25  rgupta

	* [r473] include/ftb_client_lib_defs.h, include/ftb_def.h,
	  src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/include/ftb_network.h,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_util.c: 1. Changed logic to include communication
	  using network addresses
	  2. Remove system calls for linux machines. Still using some
	  system calls for BGL machine
	  3. Changed mechanism to get pid starttime

2008-06-11 22:52  rgupta

	* [r466] components/examples/ftb_watchdog.c: Declaring events in
	  the code itself (for Declare_publishable_events) for the example
	  to work on BGL

2008-06-11 22:29  rgupta

	* [r465] src/util/ftb_util.c: Modified to make ftb_util portable on
	  Cray

2008-06-11 18:35  bhpark

	* [r464] src/client_lib/ftb_client_lib.c: #include <stdio.h>
	  #include <errno.h>
	  #include <time.h>
	  //#include <error.h>
	  #include <stdlib.h>
	  #include <unistd.h>
	  #include <sys/time.h>
	  #include <sys/types.h>
	  #include <assert.h>
	  #include <pthread.h>
	  #include <string.h>
	  #include <ctype.h>
	  #include <search.h>
	  
	  #include "ftb_def.h"
	  #include "ftb_client_lib_defs.h"
	  #include "ftb_auxil.h"
	  #include "ftb_util.h"
	  #include "ftb_manager_lib.h"
	  
	  #define FTBCI_MAX_SUBSCRIPTION_FIELDS 10
	  #define FTBCI_MAX_EVENTS_PER_PROCESS 5000
	  
	  extern FILE* FTBU_log_file_fp;
	  
	  typedef struct FTBCI_event_inst_list {
	  struct FTBU_list_node *next;
	  struct FTBU_list_node *prev;
	  FTB_event_t event_inst;
	  FTB_id_t src;
	  }FTBCI_event_inst_list_t;
	  
	  typedef struct FTBCI_callback_entry{
	  FTB_event_t *mask;
	  int (*callback)(FTB_receive_event_t *, void*);
	  void *arg;
	  }FTBCI_callback_entry_t;
	  
	  #ifdef FTB_TAG
	  typedef struct FTBCI_tag_entry {
	  FTB_tag_t tag;
	  FTB_client_handle_t owner;
	  char data[FTB_MAX_DYNAMIC_DATA_SIZE];
	  FTB_tag_len_t data_len;
	  }FTBCI_tag_entry_t;
	  #endif
	  
	  typedef FTBU_map_node_t FTBCI_map_mask_2_callback_entry_t;
	  
	  typedef struct FTBCI_client_info {
	  FTB_client_handle_t client_handle;
	  FTB_id_t *id;
	  FTB_client_jobid_t jobid;
	  uint8_t subscription_type;
	  uint8_t err_handling;
	  unsigned int max_polling_queue_len;
	  FTBU_list_node_t* event_queue; /* entry type: event_inst_list*/
	  int event_queue_size;
	  pthread_mutex_t lock;
	  pthread_cond_t cond;
	  pthread_t callback;
	  volatile int finalizing;
	  FTBU_list_node_t* callback_event_queue; /* entry type:
	  event_inst_list*/
	  FTBCI_map_mask_2_callback_entry_t *callback_map;
	  uint16_t seqnum;
	  }FTBCI_client_info_t;
	  
	  typedef struct FTBCI_publish_event_entry{
	  FTB_eventspace_t comp_cat;
	  FTB_eventspace_t comp;
	  FTB_severity_t severity;
	  FTB_event_name_t event_name;
	  }FTBCI_publish_event_entry_t;
	  
	  static pthread_mutex_t FTBCI_lock = PTHREAD_MUTEX_INITIALIZER;
	  static pthread_t callback_thread;
	  typedef FTBU_map_node_t FTBCI_map_client_handle_2_client_info_t;
	  static FTBCI_map_client_handle_2_client_info_t*
	  FTBCI_client_info_map = NULL;
	  #ifdef FTB_TAG
	  typedef FTBU_map_node_t FTBCI_map_tag_2_tag_entry_t;
	  static FTBCI_map_tag_2_tag_entry_t *FTBCI_tag_map;
	  static char tag_string[FTB_MAX_DYNAMIC_DATA_SIZE];
	  static int tag_size = 1;
	  static uint8_t tag_count = 0;
	  #endif
	  static int enable_callback = 0;
	  static int num_components = 0;
	  static int total_publish_events = 0;
	  
	  static inline void FTBCI_lock_client_lib()
	  {
	  pthread_mutex_lock(&FTBCI_lock);
	  }
	  
	  static inline void FTBCI_unlock_client_lib()
	  {
	  pthread_mutex_unlock(&FTBCI_lock);
	  }
	  
	  static inline void FTBCI_lock_client(FTBCI_client_info_t *
	  client_info)
	  {
	  pthread_mutex_lock(&client_info->lock);
	  }
	  
	  static inline void FTBCI_unlock_client(FTBCI_client_info_t *
	  client_info)
	  {
	  pthread_mutex_unlock(&client_info->lock);
	  }
	  
	  int FTBCI_util_is_equal_event(const void *lhs_void, const void*
	  rhs_void)
	  {
	  FTB_event_t *lhs = (FTB_event_t*)lhs_void;
	  FTB_event_t *rhs = (FTB_event_t*)rhs_void;
	  return FTBU_is_equal_event(lhs, rhs);
	  }
	  
	  #ifdef FTB_TAG
	  int FTBCI_util_is_equal_tag(const void *lhs_void, const void*
	  rhs_void)
	  {
	  FTB_tag_t *lhs = (FTB_tag_t *)lhs_void;
	  FTB_tag_t *rhs = (FTB_tag_t *)rhs_void;
	  return (*lhs == *rhs);
	  }
	  #endif
	  
	  int FTBCI_util_is_equal_clienthandle(const void *lhs_void, const
	  void* rhs_void)
	  {
	  FTB_client_handle_t *lhs = (FTB_client_handle_t *)lhs_void;
	  FTB_client_handle_t *rhs = (FTB_client_handle_t *)rhs_void;
	  return FTBU_is_equal_clienthandle(lhs, rhs);
	  }
	  
	  #define FTBCI_LOOKUP_CLIENT_INFO(handle, client_info) do {\
	  FTBU_map_iterator_t iter;\
	  if (FTBCI_client_info_map == NULL) {\
	  FTB_WARNING("Not initialized");\
	  return FTB_ERR_GENERAL;\
	  }\
	  FTBCI_lock_client_lib();\
	  iter = FTBU_map_find(FTBCI_client_info_map,
	  FTBU_MAP_PTR_KEY(&handle));\
	  if (iter == FTBU_map_end(FTBCI_client_info_map)) {\
	  FTB_WARNING("Not registered");\
	  FTBCI_unlock_client_lib();\
	  return FTB_ERR_INVALID_HANDLE;\
	  }\
	  client_info = (FTBCI_client_info_t *)FTBU_map_get_data(iter); \
	  FTBCI_unlock_client_lib();\
	  }while(0)
	  
	  static int FTBCI_convert_clientid_to_clienthandle(const
	  FTB_client_id_t client_id, FTB_client_handle_t *client_handle) {
	  client_handle->valid = 1;
	  memcpy(&client_handle->client_id, &client_id,
	  sizeof(FTB_client_id_t));
	  return 1;
	  }
	  
	  int FTBCI_split_namespace(const char *event_space, char
	  *region_name, char *category_name, char *component_name)
	  {
	  char *tempstr = (char *)malloc(strlen(event_space)+1);
	  char *ptr = tempstr;
	  char *str;
	  
	  FTB_INFO("In FTBCI_split_namespace");
	  if (strlen(event_space) >= FTB_MAX_EVENTSPACE) {
	  FTB_INFO("Out FTBCI_split_namespace");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  
	  strcpy(tempstr, event_space);
	  
	  str=strsep(&tempstr,".");
	  if ((strcmp(str, "\0") == 0) || (strcmp(tempstr, "\0") == 0)) {
	  FTB_INFO("Out FTBCI_split_namespace");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  strcpy(region_name,str);
	  
	  str=strsep(&tempstr,".");
	  if ((strcmp(str, "\0") == 0) || (strcmp(tempstr, "\0") == 0)) {
	  FTB_INFO("Out FTBCI_split_namespace");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  strcpy(category_name,str);
	  
	  str=strsep(&tempstr,".");
	  if (strcmp(str, "\0") == 0) {
	  FTB_INFO("Out FTBCI_split_namespace");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  strcpy(component_name,str);
	  
	  if ((tempstr != NULL)
	  || (!check_alphanumeric_underscore_format(region_name))
	  || (!check_alphanumeric_underscore_format(category_name))
	  || (!check_alphanumeric_underscore_format(component_name))) {
	  FTB_INFO("Out FTBCI_split_namespace");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  FTB_INFO("Out FTBCI_split_namespace");
	  
	  if ( ptr != NULL ) free(ptr);
	  
	  return FTB_SUCCESS;
	  }
	  
	  int FTBCI_check_subscription_value_pair(const char *lhs, const
	  char *rhs, FTB_event_t *subscription_event) {
	  static uint8_t track;
	  int ret=0;
	  FTB_INFO("In FTBCI_check_subscription_value_pair");
	  if ((strcasecmp(lhs, "") == 0) && (strcasecmp(rhs, "") == 0)) {
	  track = 1;
	  strcpy(subscription_event->severity, "all");
	  strcpy(subscription_event->region, "all");
	  strcpy(subscription_event->comp_cat, "all");
	  strcpy(subscription_event->comp, "all");
	  strcpy(subscription_event->event_name, "all");
	  strcpy(subscription_event->client_jobid, "all");
	  strcpy(subscription_event->hostname, "all");
	  }
	  else if (strcasecmp(lhs, "severity") == 0) {
	  if (track & 2)
	  return FTB_ERR_SUBSCRIPTION_STR;
	  track = track | 2;
	  if ((strcasecmp(rhs, "fatal") == 0) ||
	  (strcasecmp(rhs, "info") == 0) ||
	  (strcasecmp(rhs, "warning") == 0) ||
	  (strcasecmp(rhs, "error") == 0) ||
	  (strcasecmp(rhs, "all") == 0))
	  strcpy(subscription_event->severity, rhs);
	  else {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_FILTER_VALUE;
	  }
	  }
	  else if (strcasecmp(lhs, "event_space") == 0) {
	  char region[FTB_MAX_EVENTSPACE];
	  char comp_name[FTB_MAX_EVENTSPACE];
	  char comp_cat[FTB_MAX_EVENTSPACE];
	  if (track & 4)
	  return FTB_ERR_SUBSCRIPTION_STR;
	  track = track | 4;
	  if (strlen(rhs) >= FTB_MAX_EVENTSPACE) {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  ret = FTBCI_split_namespace(rhs, region, comp_cat, comp_name);
	  if (ret != FTB_SUCCESS) {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_EVENTSPACE_FORMAT;
	  }
	  strcpy(subscription_event->region, region);
	  strcpy(subscription_event->comp_cat, comp_cat);
	  strcpy(subscription_event->comp, comp_name);
	  }
	  else if (strcasecmp(lhs, "jobid") == 0) {
	  if (track & 8)
	  return FTB_ERR_SUBSCRIPTION_STR;
	  track = track | 8;
	  if (strlen(rhs) >= FTB_MAX_CLIENT_JOBID) {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_FILTER_VALUE;
	  }
	  strcpy(subscription_event->client_jobid, rhs);
	  }
	  else if (strcasecmp(lhs, "host_name") == 0) {
	  if (track & 16)
	  return FTB_ERR_SUBSCRIPTION_STR;
	  track = track | 16;
	  if (strlen(rhs) >= FTB_MAX_HOST_NAME) {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_FILTER_VALUE;
	  }
	  strcpy(subscription_event->hostname, rhs);
	  }
	  else if (strcasecmp(lhs, "event_name") == 0) {
	  if (track & 32)
	  return FTB_ERR_SUBSCRIPTION_STR;
	  track = track | 32;
	  if ((strlen(rhs) >= FTB_MAX_EVENT_NAME)
	  ||(!check_alphanumeric_underscore_format(lhs))) {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_FILTER_VALUE;
	  }
	  strcpy(subscription_event->event_name, rhs);
	  }
	  else {
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_ERR_FILTER_ATTR;
	  }
	  FTB_INFO("Out FTBCI_check_subscription_value_pair");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBCI_parse_subscription_string(const char *subscription_str,
	  FTB_event_t *subscription_event) {
	  
	  int subscriptionstr_len;
	  char *tempstr, *ptr;
	  char *pair[FTBCI_MAX_SUBSCRIPTION_FIELDS],*lhs, *rhs;
	  int i=0, j=0, k=0,ret=0;
	  
	  FTB_INFO("FTBCI_parse_subscription_string In");
	  if (subscription_str == NULL) {
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  
	  if ( (tempstr = (char *)malloc(strlen(subscription_str)+1) ) ==
	  NULL ) {
	  perror("malloc error\n");
	  exit(-1);
	  }
	  
	  strcpy(tempstr, subscription_str);
	  ptr = tempstr;
	  
	  ret = FTBCI_check_subscription_value_pair("", "",
	  subscription_event);
	  
	  if ((subscriptionstr_len = strlen(tempstr)) == 0) return ret;
	  
	  while ( tempstr != NULL ) {
	  if ( ( pair[i++] = strsep(&tempstr, ",")) == NULL ) {
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  free(tempstr);
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  }
	  
	  if (i > FTBCI_MAX_SUBSCRIPTION_FIELDS) {
	  FTB_INFO("Subscription string has too many fields. This maybe an
	  internal FTB error");
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  free(tempstr);
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  
	  for ( j=0; j<i; j++) {
	  if ( (lhs = strsep(&pair[j],"=")) == NULL ) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  
	  if ( (rhs= strsep(&pair[j], "=")) == NULL) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  
	  soft_trim(&lhs);
	  soft_trim(&rhs);
	  
	  if ( strlen(lhs) == 0 || strlen(rhs) == 0) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_SUBSCRIPTION_STR;
	  }
	  
	  for ( k = 0; k<strlen(lhs); k++ ) {
	  if ( lhs[k] == ' ' || lhs[k] == '\t' ) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_FILTER_ATTR;
	  }
	  }
	  
	  for ( k = 0; k<strlen(rhs); k++ ) {
	  if ( rhs[k] == ' ' || rhs[k] == '\t' ) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_ERR_FILTER_VALUE;
	  }
	  }
	  
	  if ((ret = FTBCI_check_subscription_value_pair(lhs, rhs,
	  subscription_event)) != FTB_SUCCESS) {
	  free(tempstr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return ret;
	  }
	  }
	  
	  free(ptr);
	  FTB_INFO("FTBCI_parse_subscription_string Out");
	  return FTB_SUCCESS;
	  }
	  
	  
	  int FTBCI_check_severity_values(const FTB_severity_t severity) {
	  if ((strcasecmp(severity, "fatal") == 0) ||
	  (strcasecmp(severity, "info") == 0) ||
	  (strcasecmp(severity, "warning") == 0) ||
	  (strcasecmp(severity, "error") == 0))
	  return 1;
	  else
	  return 0;
	  }
	  
	  
	  int FTBCI_hash_init()
	  {
	  hcreate(FTBCI_MAX_EVENTS_PER_PROCESS);
	  return 0;
	  }
	  
	  static ENTRY* FTBCI_search_hash(const char *name)
	  {
	  ENTRY event;
	  event.key= (char *)name;
	  return (hsearch(event, FIND));
	  }
	  
	  int FTBCI_populate_hashtable_with_events(const char *region,
	  const char *comp_cat, const char *comp, const FTB_event_info_t
	  *event_table, int num_events)
	  {
	  ENTRY event;
	  FTBCI_publish_event_entry_t *event_entry;
	  int i=0;
	  
	  FTB_INFO("In FTBCI_populate_hashtable_with_events");
	  
	  if (num_events == 0) {
	  FTB_WARNING("0 events being registered!");
	  }
	  
	  for (i=0; i<num_events; i++) {
	  if (total_publish_events >= FTBCI_MAX_EVENTS_PER_PROCESS) {
	  FTB_INFO("Out FTBCI_populate_hashtable_with_events");
	  return FTB_ERR_GENERAL;
	  }
	  
	  if ((strlen(event_table[i].event_name) >= FTB_MAX_EVENT_NAME)
	  ||(!check_alphanumeric_underscore_format(event_table[i].event_name)))
	  {
	  FTB_INFO("Out FTBCI_populate_hashtable_with_events");
	  return FTB_ERR_INVALID_FIELD;
	  }
	  
	  if (!FTBCI_check_severity_values(event_table[i].severity)) {
	  FTB_INFO("Out FTBCI_populate_hashtable_with_events");
	  return FTB_ERR_INVALID_FIELD;
	  }
	  char *event_key = (char *)malloc(sizeof(FTB_eventspace_t) +
	  sizeof(FTB_event_name_t) + 2);
	  event_entry = (FTBCI_publish_event_entry_t
	  *)malloc(sizeof(FTBCI_publish_event_entry_t));
	  concatenate_strings(event_key, region, "_", comp_cat, "_", comp,
	  "_", event_table[i].event_name, NULL);
	  int j=0;
	  for (j=0; j<strlen(event_key); j++)
	  event_key[j]=toupper(event_key[j]);
	  if (FTBCI_search_hash(event_key) != NULL) {
	  FTB_INFO("Out FTBCI_populate_hashtable_with_events : Duplicate
	  event");
	  return FTB_ERR_DUP_EVENT;
	  }
	  strcpy(event_entry->event_name, event_table[i].event_name);
	  strcpy(event_entry->comp_cat, comp_cat);
	  strcpy(event_entry->comp, comp);
	  strcpy(event_entry->severity, event_table[i].severity);
	  event.key = event_key;
	  event.data = event_entry;
	  FTBCI_lock_client_lib();
	  FTB_INFO("Event key is %s", event_key);
	  hsearch(event, ENTER);
	  total_publish_events++;
	  FTBCI_unlock_client_lib();
	  }
	  FTB_INFO("Out FTBCI_populate_hashtable_with_events");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBCI_get_event_by_name(const char *key, FTB_event_t *e)
	  {
	  ENTRY *found_event;
	  char *event_name_key = (char *)malloc(strlen(key)+1);
	  int j=0;
	  for (j=0; j<=strlen(key); j++) event_name_key[j]=toupper(key[j]);
	  FTB_INFO("In function FTBCI_get_event_by_name with
	  event_name_key=%s", event_name_key);
	  if ((found_event = FTBCI_search_hash(event_name_key)) != NULL) {
	  strcpy(e->event_name, ((FTBCI_publish_event_entry_t
	  *)found_event->data)->event_name);
	  strcpy(e->severity, ((FTBCI_publish_event_entry_t
	  *)found_event->data)->severity);
	  strcpy(e->comp_cat, ((FTBCI_publish_event_entry_t
	  *)found_event->data)->comp_cat);
	  strcpy(e->comp, ((FTBCI_publish_event_entry_t
	  *)found_event->data)->comp);
	  }
	  else {
	  FTB_INFO("Out function FTBCI_get_event_by_name with an error");
	  return FTB_ERR_INVALID_EVENT_NAME;
	  }
	  FTB_INFO("Out function FTBCI_get_event_by_name");
	  
	  if ( event_name_key != NULL ) free(event_name_key);
	  
	  return FTB_SUCCESS;
	  }
	  
	  
	  static void
	  FTBCI_util_push_to_comp_polling_list(FTBCI_client_info_t
	  *client_info, FTBCI_event_inst_list_t *entry)
	  {/*Assumes it holds the lock of that comp*/
	  FTBCI_event_inst_list_t *temp;
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_POLLING) {
	  if (client_info->event_queue_size ==
	  client_info->max_polling_queue_len) {
	  FTB_WARNING("Event queue is full");
	  temp = (FTBCI_event_inst_list_t *)client_info->event_queue->next;
	  FTBU_list_remove_entry((FTBU_list_node_t *)temp);
	  free(temp);
	  client_info->event_queue_size--;
	  }
	  FTBU_list_add_back(client_info->event_queue, (FTBU_list_node_t
	  *)entry);
	  client_info->event_queue_size++;
	  }
	  else {
	  free(entry);
	  }
	  }
	  
	  static void FTBCI_util_add_to_callback_map(FTBCI_client_info_t
	  *client_info, const FTB_event_t *event, int
	  (*callback)(FTB_receive_event_t *, void*), void *arg)
	  {
	  FTBCI_callback_entry_t *entry = (FTBCI_callback_entry_t
	  *)malloc(sizeof(FTBCI_callback_entry_t));
	  entry->mask = (FTB_event_t *)malloc(sizeof(FTB_event_t));
	  
	  memcpy(entry->mask, event, sizeof(FTB_event_t));
	  entry->callback = callback;
	  entry->arg = arg;
	  FTBCI_lock_client(client_info);
	  FTBU_map_insert(client_info->callback_map,
	  FTBU_MAP_PTR_KEY(entry->mask), (void *)entry);
	  FTBCI_unlock_client(client_info);
	  }
	  
	  static void
	  FTBCI_util_remove_from_callback_map(FTBCI_client_info_t
	  *client_info, const FTB_event_t *event)
	  {
	  FTBCI_callback_entry_t *entry = (FTBCI_callback_entry_t
	  *)malloc(sizeof(FTBCI_callback_entry_t));
	  entry->mask = (FTB_event_t *)malloc(sizeof(FTB_event_t));
	  
	  memcpy(entry->mask, event, sizeof(FTB_event_t));
	  FTBCI_lock_client(client_info);
	  FTBU_map_remove_key(client_info->callback_map,
	  FTBU_MAP_PTR_KEY(entry->mask));
	  FTBCI_unlock_client(client_info);
	  // The key should be found! If the subscribe handle's
	  subscription_event
	  // was invalid, it should have been caught before
	  //if (ret == FTBU_NOT_EXIST) return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  static void FTBCI_util_handle_FTBM_msg(FTBM_msg_t* msg)
	  {
	  FTB_client_handle_t client_handle;
	  FTBCI_client_info_t *client_info;
	  FTBU_map_iterator_t iter;
	  FTBCI_event_inst_list_t *entry;
	  
	  if (msg->msg_type != FTBM_MSG_TYPE_NOTIFY) {
	  FTB_WARNING("unexpected message type %d",msg->msg_type);
	  return;
	  }
	  FTBCI_convert_clientid_to_clienthandle(msg->dst.client_id,
	  &client_handle);
	  //handle = FTB_CLIENT_ID_TO_HANDLE(msg->dst.client_id);
	  FTBCI_lock_client_lib();
	  iter = FTBU_map_find(FTBCI_client_info_map,
	  FTBU_MAP_PTR_KEY(&client_handle));
	  if (iter == FTBU_map_end(FTBCI_client_info_map)) {
	  FTB_WARNING("Message for unregistered component");
	  FTBCI_unlock_client_lib();
	  return;
	  }
	  client_info = (FTBCI_client_info_t *)FTBU_map_get_data(iter);
	  FTBCI_unlock_client_lib();
	  entry = (FTBCI_event_inst_list_t
	  *)malloc(sizeof(FTBCI_event_inst_list_t));
	  memcpy(&entry->event_inst, &msg->event, sizeof(FTB_event_t));
	  memcpy(&entry->src, &msg->src, sizeof(FTB_id_t));
	  FTBCI_lock_client(client_info);
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY) {
	  /*has notification thread*/
	  FTBU_list_add_back(client_info->callback_event_queue,
	  (FTBU_list_node_t *)entry);
	  pthread_cond_signal(&client_info->cond);
	  }
	  else {
	  FTBCI_util_push_to_comp_polling_list(client_info, entry);
	  }
	  FTBCI_unlock_client(client_info);
	  }
	  
	  static void *FTBCI_callback_thread_client(void *arg)
	  {
	  FTBM_msg_t msg;
	  FTB_location_id_t incoming_src;
	  int ret;
	  
	  pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
	  pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
	  while (1) {
	  ret = FTBM_Wait(&msg,&incoming_src);
	  if (ret != FTB_SUCCESS) {
	  FTB_WARNING("FTBM_Wait failed %d",ret);
	  return NULL;
	  }
	  FTBCI_util_handle_FTBM_msg(&msg);
	  }
	  return NULL;
	  }
	  
	  static void *FTBCI_callback_component(void *arg)
	  {
	  FTBCI_client_info_t *client_info = (FTBCI_client_info_t *)arg;
	  FTBCI_event_inst_list_t *entry;
	  FTBU_map_iterator_t iter;
	  FTBCI_callback_entry_t *callback_entry;
	  int callback_done;
	  //FTBCI_lock_client(client_info);
	  while (1) {
	  FTBCI_lock_client(client_info);
	  while (client_info->callback_event_queue->next ==
	  client_info->callback_event_queue) {
	  /*Callback event queue is empty*/
	  pthread_cond_wait(&client_info->cond, &client_info->lock);
	  if (client_info->finalizing) {
	  FTBCI_unlock_client(client_info);
	  FTB_INFO("Finalizing");
	  return NULL;
	  }
	  }
	  FTBCI_unlock_client(client_info);
	  entry = (FTBCI_event_inst_list_t
	  *)client_info->callback_event_queue->next;
	  /*Try to match it with callback_map*/
	  callback_done = 0;
	  iter = FTBU_map_begin(client_info->callback_map);
	  while (iter != FTBU_map_end(client_info->callback_map)) {
	  callback_entry = (FTBCI_callback_entry_t
	  *)FTBU_map_get_data(iter);
	  if (FTBU_match_mask(&entry->event_inst, callback_entry->mask)) {
	  /*Make callback*/
	  FTB_receive_event_t receive_event;
	  concatenate_strings(receive_event.event_space,
	  entry->event_inst.region, ".", entry->event_inst.comp_cat, ".",
	  entry->event_inst.comp, NULL);
	  strcpy(receive_event.event_name, entry->event_inst.event_name);
	  strcpy(receive_event.severity, entry->event_inst.severity);
	  strcpy(receive_event.client_name, entry->event_inst.client_name);
	  strcpy(receive_event.client_jobid,
	  entry->event_inst.client_jobid);
	  memcpy(&receive_event.client_extension,
	  &entry->src.client_id.ext, sizeof(int));
	  memcpy(&receive_event.seqnum, &entry->event_inst.seqnum,
	  sizeof(int));
	  memcpy(&receive_event.event_type, &entry->event_inst.event_type,
	  sizeof(char));
	  memcpy(receive_event.event_payload,
	  entry->event_inst.event_payload, FTB_MAX_PAYLOAD_DATA);
	  // memcpy(&receive_event.event_properties,
	  &entry->event_inst.event_properties,
	  sizeof(FTB_event_properties_t));
	  memcpy(&receive_event.incoming_src, &entry->src.location_id,
	  sizeof(FTB_location_id_t));
	  #ifdef FTB_TAG
	  memcpy(&receive_event.len, &entry->event_inst.len,
	  sizeof(FTB_tag_len_t));
	  memcpy(receive_event.dynamic_data,
	  entry->event_inst.dynamic_data, FTB_MAX_DYNAMIC_DATA_SIZE);
	  #endif
	  (*callback_entry->callback)(&receive_event, callback_entry->arg);
	  FTBCI_lock_client(client_info);
	  FTBU_list_remove_entry((FTBU_list_node_t *)entry);
	  FTBCI_unlock_client(client_info);
	  free(entry);
	  callback_done = 1;
	  break;
	  }
	  iter = FTBU_map_next_iterator(iter);
	  }
	  if (!callback_done) {
	  /*Move to polling event queue*/
	  FTBCI_lock_client(client_info);
	  FTBU_list_remove_entry((FTBU_list_node_t *)entry);
	  FTBCI_util_push_to_comp_polling_list(client_info,entry);
	  FTBCI_unlock_client(client_info);
	  }
	  }
	  //FTBCI_unlock_client(client_info);
	  return NULL;
	  }
	  
	  
	  static void FTBCI_util_finalize_component(FTBCI_client_info_t *
	  client_info)
	  {
	  FTBM_Client_deregister(client_info->id);
	  free(client_info->id);
	  FTB_INFO("in FTBCI_util_finalize_component -- after
	  FTBM_Client_deregister");
	  if (client_info->event_queue) {
	  FTBU_list_node_t *temp;
	  FTBU_list_node_t *pos;
	  FTBU_list_for_each(pos, client_info->event_queue, temp){
	  FTBCI_event_inst_list_t *entry=(FTBCI_event_inst_list_t*)pos;
	  free(entry);
	  }
	  free(client_info->event_queue);
	  }
	  
	  FTB_INFO("In FTBCI_util_finalize_component: Free
	  client_info->event_queue");
	  
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY) {
	  FTBU_map_iterator_t iter;
	  client_info->finalizing = 1;
	  FTB_INFO("signal the callback");
	  pthread_cond_signal(&client_info->cond);
	  FTBCI_unlock_client(client_info);
	  pthread_join(client_info->callback, NULL);
	  pthread_cond_destroy(&client_info->cond);
	  FTBCI_lock_client(client_info);
	  iter = FTBU_map_begin(client_info->callback_map);
	  while (iter!=FTBU_map_end(client_info->callback_map)) {
	  FTBCI_callback_entry_t *entry =
	  (FTBCI_callback_entry_t*)FTBU_map_get_data(iter);
	  free(entry->mask);
	  iter = FTBU_map_next_iterator(iter);
	  }
	  FTBU_map_finalize(client_info->callback_map);
	  }
	  FTB_INFO("in FTBCI_util_finalize_component -- done");
	  }
	  
	  
	  int FTBC_Connect(FTB_client_t *cinfo, uint8_t extension,
	  FTB_client_handle_t *client_handle)
	  {
	  FTBCI_client_info_t *client_info;
	  char category_name[FTB_MAX_EVENTSPACE];
	  char component_name[FTB_MAX_EVENTSPACE];
	  char region_name[FTB_MAX_EVENTSPACE];
	  int ret;
	  
	  FTB_INFO("FTBC_Connect In");
	  if (client_handle == NULL)
	  return FTB_ERR_NULL_POINTER;
	  
	  client_info =
	  (FTBCI_client_info_t*)malloc(sizeof(FTBCI_client_info_t));
	  
	  if (strcasecmp(cinfo->client_subscription_style,
	  "FTB_SUBSCRIPTION_POLLING") == 0) {
	  client_info->subscription_type = FTB_SUBSCRIPTION_POLLING;
	  if (cinfo->client_polling_queue_len > 0) {
	  client_info->max_polling_queue_len =
	  cinfo->client_polling_queue_len;
	  }
	  else {
	  client_info->max_polling_queue_len = FTB_DEFAULT_POLLING_Q_LEN;
	  }
	  }
	  else if (strcasecmp(cinfo->client_subscription_style,
	  "FTB_SUBSCRIPTION_NONE") == 0) {
	  client_info->subscription_type = FTB_SUBSCRIPTION_NONE;
	  client_info->max_polling_queue_len = 0;
	  }
	  else if (strcasecmp(cinfo->client_subscription_style,
	  "FTB_SUBSCRIPTION_NOTIFY") == 0) {
	  client_info->subscription_type = FTB_SUBSCRIPTION_NOTIFY;
	  client_info->max_polling_queue_len = 0;
	  }
	  else if (strcasecmp(cinfo->client_subscription_style,
	  "FTB_SUBSCRIPTION_BOTH") == 0) {
	  client_info->subscription_type = FTB_SUBSCRIPTION_POLLING +
	  FTB_SUBSCRIPTION_NOTIFY;
	  if (cinfo->client_polling_queue_len > 0) {
	  client_info->max_polling_queue_len =
	  cinfo->client_polling_queue_len;
	  }
	  else {
	  client_info->max_polling_queue_len = FTB_DEFAULT_POLLING_Q_LEN;
	  }
	  }
	  else {
	  return FTB_ERR_SUBSCRIPTION_STYLE;
	  }
	  /* Expose the error handling as option to use */
	  client_info->err_handling = FTB_ERR_HANDLE_NONE;
	  
	  
	  if ((ret = FTBCI_split_namespace(cinfo->event_space, region_name,
	  category_name, component_name)) != FTB_SUCCESS) {
	  FTB_WARNING("Invalid namespace format");
	  FTB_INFO("FTBC_Connect Out");
	  return ret;
	  }
	  
	  FTBCI_lock_client_lib();
	  if (num_components == 0) {
	  FTBCI_client_info_map =
	  FTBU_map_init(FTBCI_util_is_equal_clienthandle);
	  #ifdef FTB_TAG
	  FTBCI_tag_map = FTBU_map_init(FTBCI_util_is_equal_tag);
	  memset(tag_string,0,FTB_MAX_DYNAMIC_DATA_SIZE);
	  #endif
	  FTBCI_hash_init();
	  FTBM_Init(1);
	  }
	  num_components++;
	  FTBCI_unlock_client_lib();
	  
	  client_info->id = (FTB_id_t *)malloc(sizeof(FTB_id_t));
	  client_info->id->client_id.ext = extension;
	  strcpy(client_info->id->client_id.region, region_name);
	  strcpy(client_info->id->client_id.comp_cat, category_name);
	  strcpy(client_info->id->client_id.comp, component_name);
	  if (strlen(cinfo->client_name) >= FTB_MAX_CLIENT_NAME) {
	  FTB_INFO("FTBC_Connect Out");
	  return FTB_ERR_INVALID_VALUE;
	  }
	  else {
	  strcpy(client_info->id->client_id.client_name,
	  cinfo->client_name);
	  }
	  FTBCI_convert_clientid_to_clienthandle(client_info->id->client_id,
	  &client_info->client_handle);
	  *client_handle = client_info->client_handle;
	  
	  FTBM_Get_location_id(&client_info->id->location_id);
	  client_info->finalizing = 0;
	  client_info->event_queue_size = 0;
	  client_info->seqnum = 0;
	  if (strlen(cinfo->client_jobid) >= FTB_MAX_CLIENT_JOBID) {
	  FTB_INFO("FTBC_Connect Out");
	  return FTB_ERR_INVALID_VALUE;
	  }
	  else {
	  strcpy(client_info->jobid, cinfo->client_jobid);
	  }
	  
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_POLLING) {
	  if (client_info->max_polling_queue_len == 0) {
	  FTB_WARNING("Polling queue size equal to 0, changing to default
	  value");
	  client_info->max_polling_queue_len = FTB_DEFAULT_POLLING_Q_LEN;
	  }
	  client_info->event_queue =
	  (FTBU_list_node_t*)malloc(sizeof(FTBU_list_node_t));
	  FTBU_list_init(client_info->event_queue);
	  }
	  else {
	  client_info->event_queue = NULL;
	  }
	  
	  pthread_mutex_init(&client_info->lock, NULL);
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY) {
	  client_info->callback_map =
	  FTBU_map_init(FTBCI_util_is_equal_event);
	  client_info->callback_event_queue =
	  (FTBU_list_node_t*)malloc(sizeof(FTBU_list_node_t));
	  FTBU_list_init(client_info->callback_event_queue);
	  FTBCI_lock_client_lib();
	  if (enable_callback == 0) {
	  pthread_create(&callback_thread,NULL,
	  FTBCI_callback_thread_client, NULL);
	  enable_callback++;
	  }
	  FTBCI_unlock_client_lib();
	  /*Create component level thread*/
	  {
	  pthread_attr_t attr;
	  pthread_attr_init(&attr);
	  pthread_attr_setstacksize(&attr,1024*1024);
	  pthread_cond_init(&client_info->cond, NULL);
	  pthread_create(&client_info->callback, &attr,
	  FTBCI_callback_component, (void*)client_info);
	  }
	  }
	  else {
	  client_info->callback_map = NULL;
	  }
	  FTBCI_lock_client_lib();
	  if (FTBU_map_insert(FTBCI_client_info_map,
	  FTBU_MAP_PTR_KEY(&client_info->client_handle), (void
	  *)client_info)==FTBU_EXIST) {
	  FTB_WARNING("This component has already been registered");
	  FTB_INFO("FTBC_Connect Out");
	  return FTB_ERR_DUP_CALL;
	  }
	  FTBCI_unlock_client_lib();
	  {
	  int ret;
	  FTBM_msg_t msg;
	  memcpy(&msg.src,client_info->id,sizeof(FTB_id_t));
	  msg.msg_type = FTBM_MSG_TYPE_CLIENT_REG;
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  FTB_INFO("parent: %s pid %d
	  pid_starttime=%s",msg.dst.location_id.hostname,
	  msg.dst.location_id.pid, msg.dst.location_id.pid_starttime);
	  ret = FTBM_Send(&msg);
	  if (ret != FTB_SUCCESS) {
	  FTB_INFO("FTBC_Connect Out");
	  return ret;
	  }
	  }
	  FTB_INFO("FTBC_Connect Out");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBCI_check_schema_file(const FTB_client_handle_t
	  client_handle, const char *schema_file)
	  {
	  typedef enum state {INIT, IN_STRUCT, FOUND_EVENTSPACE,
	  FOUND_EVENTNAME, EMPTY, }state_t;
	  FTB_eventspace_t comp_cat;
	  FTB_eventspace_t comp;
	  FTB_eventspace_t region;
	  FTB_event_info_t einfo;
	  char str[1024];
	  FILE * fp;
	  int ret;
	  
	  /* Set the schema script */
	  char schema_file_script[512] = "cat ";
	  strcat(schema_file_script, schema_file);
	  strcat(schema_file_script, " | sed -e 's/#.*//g'");
	  state_t state = EMPTY;
	  
	  fp = popen(schema_file_script, "r");
	  while (!feof(fp)) {
	  fscanf(fp, "%s", str);
	  if (feof(fp)) break;
	  if ((state == INIT) || (state == EMPTY)) {
	  /* Initial state: Ignore non-start strings */
	  if (!strcmp(str, "start")) {
	  state = IN_STRUCT;
	  }
	  else {
	  FTB_WARNING("Unexpected string (%s) found in schema file (%s)\n",
	  str, schema_file);
	  }
	  }
	  else {
	  /* Started reading. Store strings till you hit end */
	  if (!strcmp(str, "end")) {
	  /* End of struct */
	  state = INIT;
	  }
	  else {
	  /* Within struct. Store eventspace string */
	  if (state == IN_STRUCT) {
	  if (strlen(str) >= FTB_MAX_EVENTSPACE) {
	  FTB_WARNING("Event space exceeds expected length\n");
	  return FTB_ERR_INVALID_SCHEMA_FILE;
	  }
	  ret = FTBCI_split_namespace(str, region, comp_cat, comp);
	  if (ret != FTB_SUCCESS) {
	  FTB_WARNING("Event space if of incorrect format in file (%s)",
	  schema_file);
	  return FTB_ERR_INVALID_SCHEMA_FILE;
	  }
	  /* Check if the schema file was submitted by the right
	  * client
	  */
	  if ((strcasecmp(client_handle.client_id.region, region) != 0)
	  || (strcasecmp(client_handle.client_id.comp_cat, comp_cat) != 0)
	  || (strcasecmp(client_handle.client_id.comp, comp) != 0 ))
	  return FTB_ERR_INVALID_SCHEMA_FILE;
	  state = FOUND_EVENTSPACE;
	  }
	  else if (state == FOUND_EVENTSPACE) {
	  /*Store the event name */
	  state = FOUND_EVENTNAME;
	  strcpy(einfo.event_name, str);
	  }
	  else if (state == FOUND_EVENTNAME) {
	  /*Store the event severity*/
	  if (!FTBCI_check_severity_values(str)) {
	  FTB_WARNING("Unrecognized severity (%s) in file(%s)", str,
	  schema_file);
	  return FTB_ERR_INVALID_FIELD;
	  }
	  state = FOUND_EVENTSPACE;
	  strcpy(einfo.severity, str);
	  if ((ret = FTBCI_populate_hashtable_with_events(region, comp_cat,
	  comp, &einfo, 1)) != FTB_SUCCESS)
	  return ret;
	  }
	  }
	  }
	  }
	  pclose(fp);
	  if (state == EMPTY) {
	  FTB_WARNING("Schema file (%s) is either not present, or empty or
	  of invalid format", schema_file);
	  return FTB_ERR_INVALID_SCHEMA_FILE;
	  }
	  else if (state != INIT) {
	  FTB_WARNING("Schema file (%s) is of invalid format ('end'
	  missing)", schema_file);
	  return FTB_ERR_INVALID_SCHEMA_FILE;
	  }
	  else
	  return FTB_SUCCESS;
	  }
	  
	  
	  int FTBC_Declare_publishable_events(FTB_client_handle_t
	  client_handle, const char *schema_file, const FTB_event_info_t
	  *einfo, int num_events)
	  {
	  char *region = (char *)malloc(sizeof(FTB_eventspace_t));
	  char *comp_cat = (char *)malloc(sizeof(FTB_eventspace_t));
	  char *comp = (char *)malloc(sizeof(FTB_eventspace_t));
	  int ret = 0;
	  
	  FTB_INFO("FTBC_Declare_publishable_events In");
	  
	  if (client_handle.valid != 1) {
	  FTB_INFO("FTBC_Declare_publishable_events Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  if (schema_file != NULL) {
	  ret = FTBCI_check_schema_file(client_handle, schema_file);
	  if (ret != FTB_SUCCESS) {
	  FTB_INFO("FTBC_Declare_publishable_events Out");
	  return ret;
	  }
	  }
	  else {
	  strcpy(region, client_handle.client_id.region);
	  strcpy(comp_cat, client_handle.client_id.comp_cat);
	  strcpy(comp, client_handle.client_id.comp);
	  ret = FTBCI_populate_hashtable_with_events(region, comp_cat,
	  comp, einfo, num_events);
	  FTB_INFO("FTBC_Declare_publishable_events Out");
	  return ret;
	  }
	  
	  return FTB_SUCCESS;
	  }
	  
	  int FTBC_Subscribe_with_polling(FTB_subscribe_handle_t
	  *subscribe_handle, FTB_client_handle_t client_handle, const char
	  *subscription_str)
	  {
	  FTBM_msg_t msg;
	  FTBCI_client_info_t *client_info;
	  FTB_event_t *subscription_event = (FTB_event_t
	  *)malloc(sizeof(FTB_event_t));
	  int ret;
	  
	  FTB_INFO("FTBC_Subscribe_with_polling In");
	  if (subscribe_handle == NULL) {
	  FTB_INFO("FTBC_Subscribe_with_polling Out");
	  return FTB_ERR_NULL_POINTER;
	  }
	  
	  if (client_handle.valid != 1) {
	  FTB_INFO("FTBC_Subscribe_with_polling Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  FTBCI_LOOKUP_CLIENT_INFO(client_handle, client_info);
	  if (!(client_info->subscription_type &
	  FTB_SUBSCRIPTION_POLLING)){
	  FTB_INFO("FTBC_Subscribe_with_polling Out");
	  return FTB_ERR_NOT_SUPPORTED;
	  }
	  
	  if ((ret = FTBCI_parse_subscription_string(subscription_str,
	  subscription_event)) != FTB_SUCCESS)
	  return ret;
	  
	  memcpy(&subscribe_handle->client_handle, &client_handle,
	  sizeof(FTB_client_handle_t));
	  memcpy(&subscribe_handle->subscription_event, subscription_event,
	  sizeof(FTB_event_t));
	  subscribe_handle->subscription_type = FTB_SUBSCRIPTION_POLLING;
	  subscribe_handle->valid = 1;
	  
	  memcpy(&msg.event, subscription_event, sizeof(FTB_event_t));
	  memcpy(&msg.src, client_info->id, sizeof(FTB_id_t));
	  msg.msg_type = FTBM_MSG_TYPE_REG_SUBSCRIPTION;
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  ret = FTBM_Send(&msg);
	  
	  FTB_INFO("FTBC_Subscribe_with_polling Out");
	  return ret;
	  }
	  
	  int FTBC_Subscribe_with_callback(FTB_subscribe_handle_t
	  *subscribe_handle, FTB_client_handle_t client_handle, const char
	  *subscription_str, int (*callback)(FTB_receive_event_t *, void*),
	  void *arg)
	  {
	  FTBM_msg_t msg;
	  FTBCI_client_info_t *client_info;
	  FTB_event_t *subscription_event = (FTB_event_t
	  *)malloc(sizeof(FTB_event_t));
	  int ret;
	  
	  FTB_INFO("FTBC_Subscribe_with_callback In");
	  if (subscribe_handle == NULL) {
	  return FTB_ERR_NULL_POINTER;
	  FTB_INFO("FTBC_Subscribe_with_callback Out");
	  }
	  
	  if (client_handle.valid != 1) {
	  FTB_INFO("FTBC_Subscribe_with_callback Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  FTBCI_LOOKUP_CLIENT_INFO(client_handle,client_info);
	  
	  if (!(client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY)){
	  FTB_INFO("FTBC_Subscribe_with_callback Out");
	  return FTB_ERR_NOT_SUPPORTED;
	  }
	  if ((ret = FTBCI_parse_subscription_string(subscription_str,
	  subscription_event)) != FTB_SUCCESS)
	  return ret;
	  
	  //Set the subscribe_handle to correct parameters in case the arg
	  for
	  //callback is using the subscribe handle itself
	  memcpy(&subscribe_handle->client_handle, &client_handle,
	  sizeof(FTB_client_handle_t));
	  memcpy(&subscribe_handle->subscription_event, subscription_event,
	  sizeof(FTB_event_t));
	  subscribe_handle->subscription_type = FTB_SUBSCRIPTION_NOTIFY;
	  subscribe_handle->valid = 1;
	  
	  FTBCI_util_add_to_callback_map(client_info, subscription_event,
	  callback, arg);
	  
	  memcpy(&msg.event, subscription_event, sizeof(FTB_event_t));
	  memcpy(&msg.src, client_info->id, sizeof(FTB_id_t));
	  msg.msg_type = FTBM_MSG_TYPE_REG_SUBSCRIPTION;
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  ret = FTBM_Send(&msg);
	  FTB_INFO("FTBC_Subscribe_with_callback Out");
	  return ret;
	  }
	  
	  int FTBC_Get_event_handle(const FTB_receive_event_t
	  receive_event, FTB_event_handle_t *event_handle)
	  {
	  int ret;
	  
	  FTB_INFO("FTBC_Get_event_handle In");
	  if ((ret = FTBCI_split_namespace(receive_event.event_space,
	  event_handle->client_id.region, event_handle->client_id.comp_cat,
	  event_handle->client_id.comp)) != FTB_SUCCESS) {
	  return ret;
	  }
	  strcpy(event_handle->client_id.client_name ,
	  receive_event.client_name);
	  event_handle->client_id.ext = receive_event.client_extension;
	  strcpy(event_handle->location_id.hostname,
	  receive_event.incoming_src.hostname);
	  memcpy(&event_handle->location_id.pid,
	  &receive_event.incoming_src.pid, sizeof(pid_t));
	  strcpy(event_handle->location_id.pid_starttime,
	  receive_event.incoming_src.pid_starttime);
	  strcpy(event_handle->event_name, receive_event.event_name);
	  strcpy(event_handle->severity, receive_event.severity);
	  event_handle->seqnum = receive_event.seqnum;
	  FTB_INFO("FTBC_Get_event_handle Out");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBC_Compare_event_handles(const FTB_event_handle_t
	  event_handle1, const FTB_event_handle_t event_handle2)
	  {
	  if ((strcasecmp(event_handle1.client_id.region,
	  event_handle2.client_id.region) == 0)
	  && (strcasecmp(event_handle1.client_id.comp_cat,
	  event_handle2.client_id.comp_cat) == 0)
	  && (strcasecmp(event_handle1.client_id.comp,
	  event_handle2.client_id.comp) == 0)
	  && (strcasecmp(event_handle1.client_id.client_name,
	  event_handle2.client_id.client_name) == 0)
	  && (event_handle1.client_id.ext == event_handle2.client_id.ext)
	  && (strcasecmp(event_handle1.location_id.hostname,
	  event_handle2.location_id.hostname) == 0)
	  && (event_handle1.location_id.pid ==
	  event_handle2.location_id.pid)
	  && (strcasecmp(event_handle1.location_id.pid_starttime,
	  event_handle2.location_id.pid_starttime) == 0)
	  && (strcasecmp(event_handle1.event_name,
	  event_handle2.event_name) == 0)
	  && (strcasecmp(event_handle1.severity, event_handle2.severity) ==
	  0)
	  && (event_handle1.seqnum == event_handle2.seqnum)) {
	  FTB_INFO("FTBC_Compare_event_handles In");
	  return FTB_SUCCESS;
	  }
	  else {
	  FTB_INFO("FTBC_Compare_event_handles Out");
	  return FTB_FAILURE;
	  }
	  }
	  
	  int FTBC_Publish(FTB_client_handle_t client_handle, const char
	  *event_name, const FTB_event_properties_t *event_properties,
	  FTB_event_handle_t *event_handle)
	  {
	  FTBM_msg_t msg;
	  FTBCI_client_info_t *client_info;
	  FTB_event_properties_t *temp_event_properties = NULL;
	  char *event_key = (char *)malloc(sizeof(FTB_eventspace_t) +
	  sizeof(FTB_event_name_t) + 2);
	  int ret;
	  
	  FTB_INFO("FTBC_Publish In");
	  
	  if (client_handle.valid != 1) {
	  FTB_INFO("FTBC_Publish Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  if (event_handle == NULL) {
	  FTB_INFO("FTBC_Publish Out");
	  return FTB_ERR_NULL_POINTER;
	  }
	  
	  if ((strlen(event_name) == 0) || (strlen(event_name) >=
	  FTB_MAX_EVENT_NAME)) {
	  FTB_INFO("FTBC_Publish Out");
	  return FTB_ERR_INVALID_EVENT_NAME;
	  }
	  
	  FTBCI_LOOKUP_CLIENT_INFO(client_handle, client_info);
	  
	  concatenate_strings(event_key, client_info->id->client_id.region,
	  "_",
	  client_info->id->client_id.comp_cat, "_",
	  client_info->id->client_id.comp, "_", event_name, NULL);
	  ret = FTBCI_get_event_by_name(event_key, &msg.event);
	  if (ret != FTB_SUCCESS) {
	  FTB_INFO("FTBC_Publish Out with an error");
	  return ret;
	  }
	  #ifdef FTB_TAG
	  FTBCI_lock_client_lib();
	  memcpy(&msg.event.dynamic_data, tag_string,
	  FTB_MAX_DYNAMIC_DATA_SIZE);
	  FTBCI_unlock_client_lib();
	  #endif
	  
	  memcpy(&msg.src, client_info->id, sizeof(FTB_id_t));
	  if (event_properties == NULL) {
	  temp_event_properties =
	  (FTB_event_properties_t*)malloc(sizeof(FTB_event_properties_t));
	  temp_event_properties->event_type = 1;
	  event_properties = temp_event_properties;
	  }
	  else if ((event_properties->event_type != 1) &&
	  (event_properties->event_type != 2)) {
	  FTB_INFO("FTBC_Publish Out");
	  return FTB_ERR_INVALID_EVENT_TYPE;
	  }
	  
	  FTBCI_lock_client(client_info);
	  client_info->seqnum +=1;
	  FTBCI_unlock_client(client_info);
	  
	  msg.msg_type = FTBM_MSG_TYPE_NOTIFY;
	  strcpy(msg.event.hostname, msg.src.location_id.hostname);
	  strcpy(msg.event.region, client_info->id->client_id.region);
	  strcpy(msg.event.client_name,
	  client_info->id->client_id.client_name);
	  strcpy(msg.event.client_jobid, client_info->jobid);
	  msg.event.seqnum=client_info->seqnum;
	  memcpy(&msg.event.event_type, &event_properties->event_type,
	  sizeof(char));
	  memcpy(msg.event.event_payload, event_properties->event_payload,
	  FTB_MAX_PAYLOAD_DATA);
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  ret = FTBM_Send(&msg);
	  
	  strcpy(event_handle->client_id.region , msg.event.region);
	  strcpy(event_handle->client_id.comp_cat , msg.event.comp_cat);
	  strcpy(event_handle->client_id.comp , msg.event.comp);
	  strcpy(event_handle->client_id.client_name ,
	  msg.event.client_name);
	  event_handle->client_id.ext = msg.src.client_id.ext;
	  strcpy(event_handle->location_id.hostname,
	  msg.src.location_id.hostname);
	  memcpy(&event_handle->location_id.pid, &msg.src.location_id.pid,
	  sizeof(pid_t));
	  strcpy(event_handle->location_id.pid_starttime,
	  msg.src.location_id.pid_starttime);
	  strcpy(event_handle->event_name, msg.event.event_name);
	  strcpy(event_handle->severity, msg.event.severity);
	  event_handle->seqnum = msg.event.seqnum;
	  
	  FTB_INFO("FTBC_Publish Out");
	  
	  if ( event_key != NULL ) free(event_key);
	  if ( temp_event_properties != NULL ) free(temp_event_properties);
	  
	  return ret;
	  }
	  
	  int FTBC_Poll_event(FTB_subscribe_handle_t subscribe_handle,
	  FTB_receive_event_t *receive_event) {
	  FTBM_msg_t msg;
	  FTB_location_id_t incoming_src;
	  FTBCI_client_info_t *client_info;
	  FTBCI_event_inst_list_t *entry;
	  FTB_client_handle_t client_handle;
	  
	  FTB_INFO("FTBC_Poll_event In");
	  
	  if (receive_event == NULL) {
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_ERR_NULL_POINTER;
	  }
	  
	  if (subscribe_handle.valid == 0) {
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  memcpy(&client_handle, &subscribe_handle.client_handle,
	  sizeof(FTB_client_handle_t));
	  FTBCI_LOOKUP_CLIENT_INFO(client_handle, client_info);
	  
	  if (!(client_info->subscription_type & FTB_SUBSCRIPTION_POLLING))
	  {
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_ERR_NOT_SUPPORTED;
	  }
	  
	  FTBCI_lock_client(client_info);
	  if (client_info->event_queue_size > 0) {
	  int event_found = 0;
	  FTBCI_event_inst_list_t *start = (FTBCI_event_inst_list_t
	  *)client_info->event_queue->next;
	  entry = (FTBCI_event_inst_list_t
	  *)client_info->event_queue->next;
	  do {
	  if (FTBU_match_mask(&entry->event_inst,
	  &subscribe_handle.subscription_event)) {
	  event_found = 1;
	  concatenate_strings(receive_event->event_space,
	  entry->event_inst.region, ".", entry->event_inst.comp_cat, ".",
	  entry->event_inst.comp, NULL);
	  strcpy(receive_event->event_name, entry->event_inst.event_name);
	  strcpy(receive_event->severity, entry->event_inst.severity);
	  strcpy(receive_event->client_jobid,
	  entry->event_inst.client_jobid);
	  strcpy(receive_event->client_name,
	  entry->event_inst.client_name);
	  memcpy(&receive_event->client_extension,
	  &entry->src.client_id.ext, sizeof(int));
	  memcpy(&receive_event->seqnum, &entry->event_inst.seqnum,
	  sizeof(int));
	  memcpy(&receive_event->event_type, &entry->event_inst.event_type,
	  sizeof(char));
	  memcpy(receive_event->event_payload,
	  entry->event_inst.event_payload, FTB_MAX_PAYLOAD_DATA);
	  memcpy(&receive_event->incoming_src, &entry->src.location_id,
	  sizeof(FTB_location_id_t));
	  #ifdef FTB_TAG
	  memcpy(&receive_event->len, &entry->event_inst.len,
	  sizeof(FTB_tag_len_t));
	  memcpy(receive_event->dynamic_data,
	  entry->event_inst.dynamic_data, FTB_MAX_DYNAMIC_DATA_SIZE);
	  #endif
	  break;
	  }
	  else {
	  entry = (FTBCI_event_inst_list_t *)entry->next;
	  }
	  } while (entry != start);
	  if (event_found) {
	  FTBU_list_remove_entry((FTBU_list_node_t *)entry);
	  client_info->event_queue_size--;
	  FTBCI_unlock_client(client_info);
	  }
	  free(entry);
	  if (event_found) {
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_SUCCESS;
	  }
	  }
	  
	  /*Then poll FTBM once*/
	  while (FTBM_Poll(&msg,&incoming_src) == FTB_SUCCESS) {
	  FTB_client_handle_t temp_handle;
	  FTBCI_convert_clientid_to_clienthandle(msg.dst.client_id,
	  &temp_handle);
	  if (FTBCI_util_is_equal_clienthandle(&temp_handle,
	  &client_handle)) {
	  FTB_INFO("Polled event for myself");
	  int is_for_callback = 0;
	  if (msg.msg_type != FTBM_MSG_TYPE_NOTIFY) {
	  FTB_WARNING("unexpected message type %d",msg.msg_type);
	  continue;
	  }
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY) {
	  FTB_INFO("Test whether belonging to any callback subscription
	  string");
	  FTBU_map_iterator_t iter;
	  iter = FTBU_map_begin(client_info->callback_map);
	  while (iter != FTBU_map_end(client_info->callback_map)) {
	  FTBCI_callback_entry_t *callback_entry = (FTBCI_callback_entry_t
	  *)FTBU_map_get_data(iter);
	  if (FTBU_match_mask(&msg.event, callback_entry->mask)) {
	  entry = (FTBCI_event_inst_list_t
	  *)malloc(sizeof(FTBCI_event_inst_list_t));
	  memcpy(&entry->event_inst, &msg.event, sizeof(FTB_event_t));
	  memcpy(&entry->src, &msg.src, sizeof(FTB_id_t));
	  FTBU_list_add_back(client_info->callback_event_queue,
	  (FTBU_list_node_t *)entry);
	  pthread_cond_signal(&client_info->cond);
	  FTB_INFO("The event belongs to my callback");
	  is_for_callback = 1;
	  break;
	  }
	  iter = FTBU_map_next_iterator(iter);
	  }
	  }
	  if (!is_for_callback) {
	  FTB_INFO("Not for callback");
	  if (FTBU_match_mask(&msg.event,
	  &subscribe_handle.subscription_event)) {
	  concatenate_strings(receive_event->event_space, msg.event.region,
	  ".", msg.event.comp_cat, ".", msg.event.comp, NULL);
	  strcpy(receive_event->event_name, msg.event.event_name);
	  strcpy(receive_event->severity, msg.event.severity);
	  strcpy(receive_event->client_jobid, msg.event.client_jobid);
	  strcpy(receive_event->client_name, msg.event.client_name);
	  memcpy(&receive_event->client_extension, &msg.src.client_id.ext,
	  sizeof(int));
	  memcpy(&receive_event->seqnum, &msg.event.seqnum, sizeof(int));
	  memcpy(&receive_event->event_type, &msg.event.event_type,
	  sizeof(char));
	  memcpy(receive_event->event_payload, msg.event.event_payload,
	  FTB_MAX_PAYLOAD_DATA);
	  memcpy(&receive_event->incoming_src, &msg.src.location_id,
	  sizeof(FTB_location_id_t));
	  #ifdef FTB_TAG
	  memcpy(&receive_event->len, &msg.event.len,
	  sizeof(FTB_tag_len_t));
	  memcpy(receive_event->dynamic_data, msg.event.dynamic_data,
	  FTB_MAX_DYNAMIC_DATA_SIZE);
	  #endif
	  FTBCI_unlock_client(client_info);
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_SUCCESS;
	  }
	  else {
	  FTBCI_unlock_client(client_info);
	  FTBCI_util_handle_FTBM_msg(&msg);
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_GOT_NO_EVENT;
	  }
	  }
	  }
	  else {
	  FTBCI_unlock_client(client_info);
	  FTB_INFO("Polled event for someone else");
	  FTBCI_util_handle_FTBM_msg(&msg);
	  FTBCI_lock_client(client_info);
	  FTB_INFO("Testing whether someone else got my events");
	  int event_found = 0;
	  if (client_info->event_queue_size > 0) {
	  entry = (FTBCI_event_inst_list_t
	  *)client_info->event_queue->next;
	  FTBCI_event_inst_list_t * start = (FTBCI_event_inst_list_t
	  *)client_info->event_queue->next;
	  do {
	  if (FTBU_match_mask(&entry->event_inst,
	  &subscribe_handle.subscription_event)) {
	  concatenate_strings(receive_event->event_space,
	  entry->event_inst.region, ".", entry->event_inst.comp_cat, ".",
	  entry->event_inst.comp, NULL);
	  strcpy(receive_event->event_name, entry->event_inst.event_name);
	  strcpy(receive_event->severity, entry->event_inst.severity);
	  strcpy(receive_event->client_jobid,
	  entry->event_inst.client_jobid);
	  strcpy(receive_event->client_name,
	  entry->event_inst.client_name);
	  memcpy(&receive_event->client_extension,
	  &entry->src.client_id.ext, sizeof(int));
	  memcpy(&receive_event->seqnum, &entry->event_inst.seqnum,
	  sizeof(int));
	  memcpy(&receive_event->event_type, &entry->event_inst.event_type,
	  sizeof(char));
	  memcpy(receive_event->event_payload,
	  entry->event_inst.event_payload, FTB_MAX_PAYLOAD_DATA);
	  memcpy(&receive_event->incoming_src, &entry->src.location_id,
	  sizeof(FTB_location_id_t));
	  #ifdef FTB_TAG
	  memcpy(&receive_event->len, &entry->event_inst.len,
	  sizeof(FTB_tag_len_t));
	  memcpy(receive_event->dynamic_data,
	  entry->event_inst.dynamic_data, FTB_MAX_DYNAMIC_DATA_SIZE);
	  #endif
	  event_found = 1;
	  break;
	  }
	  else {
	  entry = (FTBCI_event_inst_list_t *)entry->next;
	  }
	  } while (entry != start);
	  if (event_found) {
	  FTBU_list_remove_entry((FTBU_list_node_t *)entry);
	  client_info->event_queue_size--;
	  }
	  free(entry);
	  FTBCI_unlock_client(client_info);
	  if (event_found) {
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_SUCCESS;
	  }
	  }
	  FTB_INFO("No events put in my queue, keep polling");
	  }
	  }
	  FTBCI_unlock_client(client_info);
	  FTB_INFO("FTBC_Poll_event Out");
	  return FTB_GOT_NO_EVENT;
	  }
	  
	  int FTBC_Unsubscribe(FTB_subscribe_handle_t *subscribe_handle) {
	  FTBCI_client_info_t *client_info;
	  FTBM_msg_t msg;
	  int ret;
	  
	  FTB_INFO("FTBC_Unsubscribe In");
	  FTBCI_LOOKUP_CLIENT_INFO(subscribe_handle->client_handle,
	  client_info);
	  
	  if ((subscribe_handle == NULL) || (subscribe_handle->valid == 0))
	  {
	  FTB_INFO("FTBC_Unsubscribe Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  memcpy(&msg.event, &subscribe_handle->subscription_event,
	  sizeof(FTB_event_t));
	  memcpy(&msg.src, client_info->id, sizeof(FTB_id_t));
	  msg.msg_type = FTBM_MSG_TYPE_SUBSCRIPTION_CANCEL;
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  subscribe_handle->valid = 0;
	  ret = FTBM_Send(&msg);
	  if (ret != FTB_SUCCESS) return ret;
	  
	  if (subscribe_handle->subscription_type &
	  FTB_SUBSCRIPTION_NOTIFY) {
	  //Subscription was registered for callback mechanism
	  FTBCI_util_remove_from_callback_map(client_info,
	  &subscribe_handle->subscription_event);
	  }
	  /* Nothing needs to be done if subscription was registered
	  * using polling mechanism. Only the subscribe_handle->valid
	  * needs to be set to 0
	  */
	  FTB_INFO("FTBC_Unsubscribe Out");
	  return ret;
	  }
	  
	  
	  int FTBC_Disconnect(FTB_client_handle_t client_handle)
	  {
	  FTBCI_client_info_t *client_info;
	  FTBM_msg_t msg;
	  int ret;
	  
	  FTB_INFO("FTBC_Disconnect In");
	  
	  if (client_handle.valid != 1) {
	  FTB_INFO("FTBC_Disconnect Out");
	  return FTB_ERR_INVALID_HANDLE;
	  }
	  
	  FTBCI_LOOKUP_CLIENT_INFO(client_handle, client_info);
	  
	  memcpy(&msg.src,client_info->id,sizeof(FTB_id_t));
	  msg.msg_type = FTBM_MSG_TYPE_CLIENT_DEREG;
	  FTBM_Get_parent_location_id(&msg.dst.location_id);
	  ret = FTBM_Send(&msg);
	  if (ret != FTB_SUCCESS) {
	  FTB_INFO("FTBC_Disconnect Out");
	  return ret;
	  }
	  FTBCI_lock_client(client_info);
	  FTBCI_util_finalize_component(client_info);
	  client_info->finalizing = 1;
	  FTBCI_unlock_client(client_info);
	  
	  FTBCI_lock_client_lib();
	  pthread_mutex_destroy(&client_info->lock);
	  free(client_info);
	  FTBU_map_remove_key(FTBCI_client_info_map,
	  FTBU_MAP_PTR_KEY(&client_handle));
	  if (client_info->subscription_type & FTB_SUBSCRIPTION_NOTIFY) {
	  enable_callback--;
	  if (enable_callback == 0) {
	  /*Last callback component finalized*/
	  pthread_cancel(callback_thread);
	  pthread_join(callback_thread, NULL);
	  }
	  }
	  num_components--;
	  if (num_components == 0) {
	  FTBM_Finalize();
	  FTBU_map_finalize(FTBCI_client_info_map);
	  #ifdef FTB_TAG
	  FTBU_map_finalize(FTBCI_tag_map);
	  #endif
	  FTBCI_client_info_map = NULL;
	  }
	  FTBCI_unlock_client_lib();
	  
	  FTB_INFO("FTBC_Disconnect Out");
	  return FTB_SUCCESS;
	  }
	  
	  #ifdef FTB_TAG
	  static void FTBCI_util_update_tag_string()
	  {
	  int offset = 0;
	  FTBU_map_iterator_t iter;
	  //Format: 1 byte tag count (M) + M*{tag, len(N), N byte data}
	  memcpy(tag_string, &tag_count, sizeof(tag_count));
	  offset+=sizeof(tag_count);
	  iter = FTBU_map_begin(FTBCI_tag_map);
	  while (iter != FTBU_map_end(FTBCI_tag_map)) {
	  FTBCI_tag_entry_t *entry = (FTBCI_tag_entry_t
	  *)FTBU_map_get_data(iter);
	  memcpy(tag_string+offset, &entry->tag, sizeof(FTB_tag_t));
	  offset+=sizeof(FTB_tag_t);
	  memcpy(tag_string+offset, &entry->data_len,
	  sizeof(FTB_tag_len_t));
	  offset+=sizeof(FTB_tag_len_t);
	  memcpy(tag_string+offset, &entry->data, entry->data_len);
	  offset+=entry->data_len;
	  iter = FTBU_map_next_iterator(iter);
	  }
	  tag_size = offset;
	  }
	  
	  int FTBC_Add_dynamic_tag(FTB_client_handle_t handle, FTB_tag_t
	  tag, const char *tag_data, FTB_tag_len_t data_len)
	  {
	  FTBU_map_iterator_t iter;
	  
	  FTB_INFO("FTBC_Add_dynamic_tag In");
	  
	  FTBCI_lock_client_lib();
	  if (FTB_MAX_DYNAMIC_DATA_SIZE - tag_size < data_len +
	  sizeof(FTB_tag_len_t) + sizeof(FTB_tag_t)) {
	  FTB_INFO("FTBC_Add_dynamic_tag Out");
	  return FTB_ERR_TAG_NO_SPACE;
	  }
	  
	  iter = FTBU_map_find(FTBCI_tag_map, FTBU_MAP_PTR_KEY(&tag));
	  if (iter == FTBU_map_end(FTBCI_tag_map)) {
	  FTBCI_tag_entry_t *entry = (FTBCI_tag_entry_t
	  *)malloc(sizeof(FTBCI_tag_entry_t));
	  FTB_INFO("create a new tag");
	  entry->tag = tag;
	  entry->owner = handle;
	  entry->data_len = data_len;
	  memcpy(entry->data, tag_data, data_len);
	  FTBU_map_insert(FTBCI_tag_map, FTBU_MAP_PTR_KEY(&entry->tag),
	  (void*)entry);
	  tag_count++;
	  }
	  else {
	  FTBCI_tag_entry_t *entry = (FTBCI_tag_entry_t
	  *)FTBU_map_get_data(iter);
	  if (entry->owner == handle) {
	  FTB_INFO("update tag");
	  entry->data_len = data_len;
	  memcpy(entry->data, tag_data, data_len);
	  }
	  else {
	  FTB_INFO("FTBC_Add_dynamic_tag Out");
	  return FTB_ERR_TAG_CONFLICT;
	  }
	  }
	  
	  FTBCI_util_update_tag_string();
	  FTBCI_unlock_client_lib();
	  FTB_INFO("FTBC_Add_dynamic_tag Out");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBC_Remove_dynamic_tag(FTB_client_handle_t handle, FTB_tag_t
	  tag)
	  {
	  FTBU_map_iterator_t iter;
	  FTBCI_tag_entry_t *entry;
	  
	  FTB_INFO("FTBC_Remove_dynamic_tag In");
	  FTBCI_lock_client_lib();
	  iter = FTBU_map_find(FTBCI_tag_map, FTBU_MAP_PTR_KEY(&tag));
	  if (iter == FTBU_map_end(FTBCI_tag_map)) {
	  FTB_INFO("FTBC_Remove_dynamic_tag Out");
	  return FTB_ERR_TAG_NOT_FOUND;
	  }
	  
	  entry = (FTBCI_tag_entry_t *)FTBU_map_get_data(iter);
	  if (entry->owner != handle) {
	  FTB_INFO("FTBC_Remove_dynamic_tag Out");
	  return FTB_ERR_TAG_CONFLICT;
	  }
	  
	  FTBU_map_remove_iter(iter);
	  tag_count--;
	  free(entry);
	  FTBCI_util_update_tag_string();
	  FTBCI_unlock_client_lib();
	  FTB_INFO("FTBC_Remove_dynamic_tag Out");
	  return FTB_SUCCESS;
	  }
	  
	  int FTBC_Read_dynamic_tag(const FTB_receive_event_t *event,
	  FTB_tag_t tag, char *tag_data, FTB_tag_len_t *data_len)
	  {
	  uint8_t tag_count;
	  uint8_t i;
	  int offset;
	  
	  FTB_INFO("FTBC_Read_dynamic_tag In");
	  memcpy(&tag_count, event->dynamic_data, sizeof(tag_count));
	  offset = sizeof(tag_count);
	  for (i=0;i<tag_count;i++) {
	  FTB_tag_t temp_tag;
	  FTB_tag_len_t temp_len;
	  memcpy(&temp_tag, event->dynamic_data + offset,
	  sizeof(FTB_tag_t));
	  offset+=sizeof(FTB_tag_t);
	  memcpy(&temp_len, event->dynamic_data + offset,
	  sizeof(FTB_tag_len_t));
	  offset+=sizeof(FTB_tag_len_t);
	  if (tag == temp_tag) {
	  if (*data_len < temp_len) {
	  FTB_INFO("FTBC_Read_dynamic_tag Out");
	  return FTB_ERR_TAG_NO_SPACE;
	  }
	  else {
	  *data_len = temp_len;
	  memcpy(tag_data, event->dynamic_data + offset, temp_len);
	  FTB_INFO("FTBC_Read_dynamic_tag Out");
	  return FTB_SUCCESS;
	  }
	  }
	  offset += temp_len;
	  }
	  
	  FTB_INFO("FTBC_Read_dynamic_tag Out");
	  return FTB_ERR_TAG_NOT_FOUND;
	  }
	  #endif

2008-06-06 02:56  rgupta

	* [r463]
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/Makefile.in,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c:
	  Bug fix for FTB_Publish for BGL
	  Bug fix where ftb_auxil.o was not getting linked in the Makefiles
	  for
	  BGL

2008-06-05 03:43  rgupta

	* [r462] src/agent/ftb_agent.c: Rectified bug in ftb_agent

2008-06-05 03:42  rgupta

	* [r461] src/client_lib/platforms/bgl/init_scripts,
	  src/client_lib/platforms/bgl/init_scripts/ftb_agent: Added init.d
	  scripts for BGL

2008-05-22 20:52  rgupta

	* [r460] src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c:
	  Commit some older changes for BG/L

2008-05-01 19:59  shampton

	* [r459] src/client_lib/ftb_client_lib.c, src/include/ftb_auxil.h,
	  src/util/ftb_auxil.c: Importing changes made by the ORNL team to
	  fix memory leaks and deadlock in the core FTB v0.5 code.

2008-04-29 19:44  shampton

	* [r458] components/examples/ftb_pingpong.c,
	  src/client_lib/ftb_client_lib.c, src/include/ftb_auxil.h,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_auxil.c: ftb_pingpong.c
	  * Updated print statements to give the running total of the event
	  just parsed.
	  
	  ftb_network_sock.h
	  * Removed call to malloc() as it was not needed.
	  
	  ftb_auxil.h
	  * Updated function prototypes to reflect changes. c.f.
	  ftb_auxil.c.
	  
	  ftb_client_lib.c
	  * Too many changes to list, but all involved removing memory
	  leaks. Used the package
	  valgrind to locate and fix the leaks.
	  
	  ftb_auxil.c
	  * Removed function concatenate_strings() and replaced it with
	  calls to snprintf(). The
	  function was a major source of memory leaks and offered no real
	  advantages.
	  * Rewrote function trim_string() to be more efficient and easy to
	  read. Added basic sanity
	  checks as well.
	  * Edited function check_alphanumeric_underscore_format() to use
	  library functions for
	  character comparisons. Made it more efficient and easier to read.

2008-03-18 16:01  shampton

	* [r417] components/examples/Makefile.in: Changed spelling of
	  "prevent" to "present" to indicate certain files are missing.

2008-02-14 21:18  rgupta

	* [r408] components/Makefile.in, components/autogen.sh,
	  components/configure.in, components/examples/Makefile.in,
	  components/examples/ftb_throw_delay_mpi.c, configure.in: 1. Added
	  checks for presence of ofed and mpi in the components Makefile.in
	  2. Minor comments in configure.in (both main and components),
	  autogen.sh
	  3. A small bug fix in ftb_throw_delay_mpi.c (note:
	  ftb_throw_delay_mpi.c and the ib example still need to be tested)

2008-02-05 18:56  rgupta

	* [r399] Known_Bugs, README, components/README, docs/README: 1.
	  Tested a fresh copy of code and updated READMEs accordingly
	  2. Added a new README in the doc directory

2008-02-05 07:39  rgupta

	* [r397] Known_Bugs, README, components/configure.in: Modified
	  README files and added KnownBugs file

2008-02-05 06:41  rgupta

	* [r396] include/config.h, include/config.h.in: Added correct
	  config.h.in file

2008-02-05 06:36  rgupta

	* [r395] components/configure.in:

2008-02-05 06:35  rgupta

	* [r394] components/examples/Makefile.in,
	  components/examples/ftb_ib_port_status_publisher.c:

2008-02-05 06:34  rgupta

	* [r393] components/mvapich2: Deleted mvapich2 since code has moved
	  to examples

2008-02-05 06:08  rgupta

	* [r392] Makefile.in, components/Makefile.in, components/README,
	  components/autogen.sh, components/configure.in,
	  components/examples/Makefile.in,
	  components/examples/ftb_example_callback_unsubscribe.c,
	  components/mvapich2/standalone_ib/Makefile.in, configure.in,
	  include/config.h, include/ftb_def.h,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h:
	  1. Added --enable-debug logic (removed it from ftb_def.h)
	  2. Change environment variables for the ports and names for agent
	  and bstrap server
	  3. Made components a seperate entity in itself with its own
	  autogen.sh, configure.in, Makefile.in

2008-02-04 22:58  rgupta

	* [r389] components/examples/ftb_example_callback_unsubscribe.c,
	  components/examples/ftb_multithreading_example1.c,
	  components/examples/watchdog_schema.ftb: New examples

2008-02-04 22:56  rgupta

	* [r388] components/schemas: Removing schemas directory

2008-02-04 22:54  rgupta

	* [r387] Makefile.in, README, components/examples/Makefile.in,
	  components/examples/ftb_eventhandle_example.c,
	  components/examples/ftb_multi_comp.c,
	  components/examples/ftb_multiplecomp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_publisher.c,
	  components/examples/ftb_simple_subscriber.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, configure.in,
	  src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/Makefile.in,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/util/ftb_util.c, utils: 1. Removed parser code and util
	  directory
	  2. Commented and cleaned up examples
	  3. New example: ftb_eventhandle_example.c
	  4. Modified configure.in and some Makefiles
	  5. Removed useless printf
	  5. Added README placeholder

2008-01-31 19:47  rgupta

	* [r385] components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c:
	  1. Cleaned up error codes and string lengths
	  2. Changed some comments

2008-01-30 23:21  rgupta

	* [r384] include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c:
	  1. Changed BGL code to conform to 0.5 API. It is untested as of
	  now.
	  2. Took care of a warning in ftb_bootstrap_udp.c file.
	  3. Added const qualifier before schema_file in FTB_Declare...
	  4. Added condition to check if subscription_string is NULL and
	  return error in FTBCI_parse_subscription_string

2008-01-30 21:44  rgupta

	* [r383] include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c: Commented "tag" logic

2008-01-30 21:18  rgupta

	* [r382] components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/util/ftb_util.c: Added logic for pid_starttime. Tested with
	  ftb_watchdog.c

2008-01-29 22:55  rgupta

	* [r378] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/linux/libftb.c: 1. Added event_handle
	  functions : Get_event_handle and Compare_event_handles
	  2. Modified FTB_receive_event_t as pwer guide
	  3. Modified examples to bring them to working state
	  4. Modified lenght of some parameters due to introduction of
	  event_handles

2008-01-29 15:53  rgupta

	* [r377] components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/linux/libftb.c: 1. Added concept of
	  schema file in FTBC_Declare_Publishable
	  2. Modified the util_split_namespace function in ftb_client_lib.c
	  3. Tested ftb_watchdof example
	  

2008-01-25 22:47  rgupta

	* [r376] components/examples/ftb_watchdog.c,
	  include/ftb_client_lib_defs.h, include/ftb_def.h,
	  include/libftb.h, src/agent/ftb_agent.c,
	  src/client_lib/ftb_client_lib.c, src/include/ftb_util.h,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c: 1. Split
	  some definitions from ftb_def.h to ftb_client_lib_defs.h
	  2. Included this new file in all relevant source files

2008-01-25 21:43  rgupta

	* [r375] components/examples/ftb_multithreading_example1.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  src/client_lib/ftb_client_lib.c, src/util/ftb_util.c: 1. Changed
	  the definition of client_handle
	  2. Now checking for a valid client_handle
	  3. Renamed handle to client_handle at some locations

2008-01-25 19:42  rgupta

	* [r374] src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c: Removed error.h file form the
	  code

2008-01-25 19:28  rgupta

	* [r373] src/include/ftb_auxil.h: adding ftb_auxil.h

2008-01-25 19:24  rgupta

	* [r372] src/util/ftb_auxil.c: Adding auxil.c

2008-01-25 17:07  rgupta

	* [r371] include/ftb_event_def.h,
	  src/manager_lib/ftb_event_table.c: Removed obsolete files

2008-01-23 20:12  rgupta

	* [r370] components/examples/Makefile.in,
	  components/examples/ftb_multithreading_example1.c,
	  components/examples/include, src/client_lib/ftb_client_lib.c,
	  src/manager_lib/ftb_manager_lib.c, src/util/ftb_util.c: 1. Added
	  examples for testing multi threading
	  2. Changed functionality so that shandle in FTB_Subscribe can be
	  passed as an argument to the callback function simultaneously
	  3. Removed usedless print statements
	  4. Removed include directory from components/examples since xml
	  files are not required anymore.

2008-01-23 09:29  rgupta

	* [r369] Makefile.in, components/examples/ftb_multi_comp.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_manager_lib.h, include/libftb.h,
	  src/agent/ftb_agent.c, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/Makefile.in, src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/ftb_bootstrap_udp.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/manager_lib/network/network_sock/ftb_network_tcp.c,
	  src/manager_lib/network/network_sock/include/ftb_network_sock.h,
	  src/util/ftb_util.c: Fixed multithreading bug (FTB_Publish when
	  called from notification thread was failing) +
	  FTB_Declare_publishable_events (w/o schema file) impemented

2008-01-21 22:51  rgupta

	* [r368] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/linux/libftb.c: FTB_Unsubscribe
	  implemented; ftb_watchdog, ftb_notify_logger and
	  ftb_polling_logger tested

2008-01-19 06:25  rgupta

	* [r367] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_watchdog.c, configure.in,
	  include/ftb_def.h, include/libftb.h, src/Makefile.in,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/Makefile.in,
	  src/client_lib/platforms/linux/libftb.c, src/include/ftb_util.h,
	  src/manager_lib/ftb_event_table.c, src/util/Makefile.in,
	  src/util/ftb_util.c: FTB_Subscribe subscription string
	  implemented with all example components

2008-01-17 16:42  rgupta

	* [r365] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  src/client_lib/ftb_client_lib.c, src/include/ftb_util.h,
	  src/util/ftb_util.c: working examples

2008-01-17 15:29  rgupta

	* [r364] components/examples/ftb_polling_logger.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_event_def.h, include/ftb_manager_lib.h,
	  include/libftb.h, src/agent/ftb_agent.c,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c, src/include/ftb_util.h,
	  src/manager_lib/ftb_event_table.c,
	  src/manager_lib/ftb_manager_lib.c, src/util/ftb_util.c: Working
	  code changes: ftb_connect, ftb_publish. strings are not used for
	  storing and in messages. Watchdog and polling logger tested and
	  working, *_tag functionalities disabled

2008-01-12 02:03  rgupta

	* [r362] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  components/mvapich2/standalone_ib/ftb_port_status_thrower.c,
	  components/schemas/01_watchdog_events.xml, include/ftb_def.h,
	  include/libftb.h, src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/ftb_manager_lib.c, src/util/ftb_util.c: Commiting
	  part of code : Tested FTB_Connect, modified components

2008-01-11 22:10  rgupta

	* [r361] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  components/mvapich2/standalone_ib/ftb_port_status_thrower.c,
	  include/ftb_def.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/ftb_manager_lib.c: some routine name changes

2007-11-01 13:02  buntinas

	* [r340] components/examples/ftb_polling_logger.c: added option to
	  log to stdout

2007-10-23 15:34  vishnu

	* [r327] components/mvapich2/standalone_ib/Makefile.in,
	  components/mvapich2/standalone_ib/ftb_port_status_thrower.c:
	  Adding the updated makefile for port_status_thrower and the
	  updated source code of ftb port status thrower for 0.4 API

2007-10-23 14:28  vishnu

	* [r326] components/mvapich2/standalone_ib/Makefile.in: Adding the
	  Makefile for MVAPICH2 component

2007-10-23 14:25  vishnu

	* [r325] configure.in: Making the change to the configure.in for
	  MVAPICH2 makefile

2007-10-21 23:26  vishnu

	* [r323] components/mvapich2/standalone_ib: Adding the source for
	  InfiniBand related source

2007-10-21 23:06  vishnu

	* [r322] components/mvapich2: Adding the OSU source directory

2007-10-11 15:20  rgupta

	* [r316] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_throw_events.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c:
	  Committed final code.
	  
	  Defer BGL zoid wrapper for later.`

2007-10-11 07:04  rgupta

	* [r315] autogen.sh, components/examples/Makefile.in,
	  components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, components/examples/include,
	  components/examples/include/ftb_ftb_examples_multicomp_comp1_publishevents.h,
	  components/examples/include/ftb_ftb_examples_multicomp_comp2_publishevents.h,
	  components/examples/include/ftb_ftb_examples_multicomp_comp3_publishevents.h,
	  components/examples/include/ftb_ftb_examples_notify_logger_publishevents.h,
	  components/examples/include/ftb_ftb_examples_pingpong_publishevents.h,
	  components/examples/include/ftb_ftb_examples_polling_logger_publishevents.h,
	  components/examples/include/ftb_ftb_examples_simple_publishevents.h,
	  components/examples/include/ftb_ftb_examples_watchdog_publishevents.h,
	  components/examples/include/ftb_mpi_mpi_example_publishevents.h,
	  components/examples/include/ftb_mpi_mpich_publishevents.h,
	  components/schemas/01_watchdog_events.xml,
	  components/schemas/02_simple_events.xml,
	  components/schemas/03_notify_logger_events.xml,
	  components/schemas/04_polling_logger_events.xml,
	  components/schemas/05_pingpong_events.xml,
	  components/schemas/06_multicomp1_events.xml,
	  components/schemas/06_multicomp2_events.xml,
	  components/schemas/06_multicomp3_events.xml,
	  components/schemas/07_throw_delay_mpi.xml,
	  components/schemas/10_example_mpich2_events.xml, configure.in,
	  include/ftb_def.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/ftb_event_table.c, utils/ftb_component_parser.pl,
	  utils/ftb_event_parser.pl, utils/ftb_throwevent_parser.pl: All
	  primitives working fine. All components (except MPI specific)
	  work fine
	  Also created a different parser for everyone to generate their
	  throw events header file

2007-10-10 18:12  rgupta

	* [r314] components/examples/ftb_notify_logger.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_event_def.h, include/ftb_manager_lib.h,
	  include/ftb_throw_events.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/ftb_event_table.c, src/util/ftb_util.c:
	  Primitives conforming to 0.4 API working fine for Linux.
	  Primitives need zoid wrapper for BGL.
	  watchdog examples working fine.

2007-10-05 18:08  rgupta

	* [r313] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_manager_lib.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c: Working FTB_Throw
	  (FTB_Publish_event) version.
	  Watchdog and simple thrower have been tested and work fine.
	  Changed error_msg string (to set to NULL) in FTB_Init as well.

2007-10-03 22:03  rgupta

	* [r312] autogen.sh, components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_watchdog.c, configure.in,
	  include/ftb_def.h, include/ftb_event_def.h,
	  include/ftb_throw_events.h, include/libftb.h,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/bgl/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/bgl/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/bgl/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/linux/libftb.c,
	  src/manager_lib/ftb_event_table.c: - Modified API and logic to
	  support Version 0.4 FTB_Init()
	  - Modified some components as well.
	  - Commented xml parser for now in configure.in and have generated
	  ftb_throw_events manually

2007-09-10 21:41  rgupta

	* [r311] Makefile.in: Moving examples to prefix directory on
	  makeinstall

2007-09-10 21:25  rgupta

	* [r310] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c,
	  components/schemas/01_watchdog_events.xml,
	  components/schemas/02_simple_events.xml,
	  components/schemas/05_pingpong_events.xml,
	  components/schemas/06_multicomp1_events.xml,
	  components/schemas/06_multicomp2_events.xml,
	  components/schemas/06_multicomp3_events.xml,
	  components/schemas/07_throw_delay_mpi.xml,
	  components/schemas/10_example_mpich2_events.xml,
	  utils/ftb_throwevent_parser.pl: 1. Changed parser to predefine
	  severities
	  2. Changed schemas to redefine severities
	  3. Changed componenent API to remove need for prefixes

2007-09-10 20:33  rgupta

	* [r309] components/examples/Makefile.in, configure.in,
	  src/client_lib/platforms/BGL, src/client_lib/platforms/Linux,
	  src/client_lib/platforms/bgl, src/client_lib/platforms/linux,
	  utils/ftb_throwevent_parser.pl: 1. Made all events ids for all
	  components unique for now in ftb_throwevent_parser.pl. We will
	  change it later
	  2. Changed BGL directory to bgl and Linux directory to linux for
	  consistency

2007-09-10 19:57  rgupta

	* [r308] include/libftb.h: Changes to macro parameters

2007-09-10 19:27  rgupta

	* [r307] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_notify_logger.c,
	  components/examples/ftb_pingpong.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_simple_catcher.c,
	  components/examples/ftb_simple_thrower.c,
	  components/examples/ftb_throw_delay_mpi.c,
	  components/examples/ftb_watchdog.c, include/ftb_def.h,
	  include/ftb_event_def.h, include/ftb_manager_lib.h,
	  include/libftb.h, src/agent/ftb_agent.c,
	  src/client_lib/ftb_client_lib.c,
	  src/client_lib/include/ftb_client_lib.h,
	  src/client_lib/platforms/BGL/ftb_zoid_wrapper.c,
	  src/client_lib/platforms/BGL/zoid_client/ftb_zoid_client.h,
	  src/client_lib/platforms/BGL/zoid_client/implementation/ftb_zoid_client.c,
	  src/client_lib/platforms/Linux/libftb.c,
	  src/manager_lib/ftb_event_table.c,
	  src/manager_lib/ftb_manager_lib.c,
	  src/manager_lib/network/network_sock/ftb_database_server_udp.c,
	  src/util/ftb_util.c, utils/ftb_throwevent_parser.pl: 1. Changed
	  CTGY to CAT and ctgy to cat
	  2. Fixed two ptr assignment warnings/bugs
	  3. Fixed macros used for creating masks to follow new naming
	  style.
	  4 Fixed FTB_EVENT_SET...(mask, value) macros

2007-08-30 02:08  qgao

	* [r300] components/examples/ftb_multi_comp.c,
	  components/examples/ftb_polling_logger.c,
	  components/examples/ftb_watchdog.c,
	  components/schemas/02_simple_events.xml, examples: Remove the old
	  example directory as it is replaced by new
	  component/examples
	  
	  Minor changes in the example code

2007-08-30 00:31  rgupta

	* [r298]

2007-08-29 01:52  rgupta

	* [r297] configure.in : Removed AC_INSTALL command, enforced check
	  for presence of ftb_throw_events.h. ./configure now aborts if
	  file is not present
	  
	  Makefile.in : Removed un-necessary echo statements
	  
	  autogen.sh : Modified cleanup to remove ftb_throw_events.h

2007-08-29 01:52  qgao

	* [r296] Bug fixes

2007-08-29 01:51  qgao

	* [r295] Fix makefile problem

2007-08-29 01:41  qgao

	* [r294] Fix for Makefile

2007-08-29 00:57  rgupta

	* [r293] Deleting Makefiles from subdirectories during ./autogen
	  cleanup

2007-08-29 00:32  rgupta

	* [r292] Adding component examples and their schemas.
	  
	  Adding the modified parser
	  
	  Modified ftb_def.h by removing predefined component macros

2007-08-29 00:11  qgao

	* [r291] Fix a bug in Makefile

2007-08-28 23:46  rgupta

	* [r290] An ugly way to fix the source bgl_env_file problem

2007-08-28 22:58  rgupta

	* [r289] changes for sourcing environment file

2007-08-28 22:15  qgao

	* [r288] Fix problems in setup file and Makefile.in

2007-08-28 19:57  rgupta

	* [r286] BGL environment info file

2007-08-28 14:21  rgupta

	* [r285] fixed a ftb_throw_events.h bug in Makefile.in

2007-08-28 04:09  rgupta

	* [r284] Reverted parser back to configure.in.
	  Substitued exit for 'die' in parser
	  Created event files for example components

2007-08-27 23:10  rgupta

	* [r283] 1. Removed some old files which are no longer used
	  2. Renamed parser.pl to ftb_throwevent_parser.pl and moved it to
	  trunk/utils.
	  3. Modified Makefile.in to reflect parser name change

2007-08-27 23:03  rgupta

	* [r282] 1. Moved throw event parser logic to Makefile.in from
	  configure.in. The throw_events.h file now gets deleted on 'make
	  clean'
	  
	  2. make will now create 'sbin' and 'lib' in the srcdir (which is
	  also the buildir). "make clean" will remove these directories.
	  "make install" will copy contents from these directories to
	  prefix directories

2007-08-27 21:48  rgupta

	* [r281] Deleteing Makefiles. Only Makefiles.in to be used from now

2007-08-27 21:32  rgupta

	* [r280] Major modifications.
	  
	  AM trunk/install.sh (EMPTY PLACEHOLDER FILE)
	  D trunk/utils/xmlparser/example_integration.c (REMOVED)
	  D trunk/utils/xmlparser/ftb_event_def.h (INTEGATED WITH OTHER
	  FILES)
	  D trunk/utils/xmlparser/ftb_event_search.c (INTEGRATED/RENAMED TO
	  SOME OTHER FILE)
	  M trunk/utils/xmlparser/parser.pl (THROW EVENT XML PARSER)
	  D trunk/event_schema (REMOVED. SCHEMAS MOVED TO COMPONENTS
	  DIRECTORY)
	  A trunk/Makefile.in (SUPPORT FOR AUTOCONF AND MAKE, MAKE INSTALL)
	  M trunk/include/ftb_event_def.h (MODIFIED)
	  D trunk/include/ftb_conf.h (GENERATED NOW BY PARSER)
	  A trunk/components (WILL BE USED FOR COMPONENT SCHEMAS AND
	  EXAMPLES)
	  A trunk/components/schemas
	  AM trunk/components/schemas/mpich2_events.xml
	  A trunk/components/examples
	  D trunk/lib (WILL BE GENERATED DYNAMICALLY BY ./CONFIGURE)
	  AM trunk/configure.in
	  A trunk/src/manager_lib/Makefile.in
	  D trunk/src/manager_lib/include/ftb_event_table.h (INTEGRATED IN
	  MANAGERLIB)
	  M trunk/src/manager_lib/ftb_event_table.c
	  A trunk/src/manager_lib/network/network_sock/Makefile.in
	  A trunk/src/Makefile.in
	  M trunk/src/client_lib/ftb_client_lib.c
	  A trunk/src/client_lib/Makefile.in
	  M trunk/src/client_lib/include/ftb_client_lib.h
	  A trunk/src/client_lib/platforms/Linux/Makefile.in
	  A trunk/src/client_lib/platforms/Makefile.in
	  A trunk/src/client_lib/platforms/BGL/Makefile.in
	  A trunk/src/client_lib/platforms/BGL/zoid_client/Makefile.in
	  A
	  trunk/src/client_lib/platforms/BGL/zoid_client/implementation/Makefile.in
	  A
	  trunk/src/client_lib/platforms/BGL/zoid_client/server/Makefile.in
	  A
	  trunk/src/client_lib/platforms/BGL/zoid_client/client/Makefile.in
	  A trunk/src/util/Makefile.in
	  A trunk/src/agent/Makefile.in
	  D trunk/bin
	  AM trunk/autogen.sh

2007-08-27 20:09  qgao

	* [r279] check-in the ftb_event_table.h and minor fixes

2007-08-27 20:05  rgupta

	* [r278] Minor renaming changes to XML parser

2007-08-27 19:44  qgao

	* [r277] Adding new event table file to the manager_lib with minor
	  changes

2007-08-27 16:43  qgao

	* [r276] Change examples to use string to refer to an event

2007-08-27 15:10  qgao

	* [r275] Change interface and client lib to use string instead of
	  int to specify
	  events
	  
	  Adding interface and client lib impl to allow component register
	  all
	  predefined catch events in one call

2007-08-27 14:11  qgao

	* [r274] Adding testing programs

2007-08-27 02:23  qgao

	* [r273] Bug fixes
	  
	  Adding two other tests

2007-08-26 02:05  qgao

	* [r270] Small changes and minor fixes
	  
	  Adding another testing program with multiple components in one
	  executable

2007-08-24 22:07  qgao

	* [r265] Minor fix in event catching part

2007-08-24 19:04  qgao

	* [r264] Fix a bug in multiple catcher case
	  
	  Plus rearrange some testing programs

2007-08-23 22:58  qgao

	* [r263] Adding dymanic tag support

2007-08-23 18:50  qgao

	* [r262] Changing the catching interface so that catcher has an
	  option to know
	  the source of the message.
	  
	  Plus some fixes.

2007-08-23 17:12  qgao

	* [r261] Adding two test programs and some fixes

2007-08-22 21:34  qgao

	* [r260] Check-in
	  1. Some fixes
	  2. Make manager to reconnect to others in case the connection is
	  lost

2007-08-22 02:37  qgao

	* [r259] Several fixes and some changes

2007-08-20 21:48  rgupta

	* [r258] Added 4 files
	  1. example_integration - emulates how the event_search will be
	  integarted in the Manager library. This file will be removed once
	  parser/search is integrated with FTB
	  2. ftb_event_def.h - declares a data structure that captures the
	  component and event information present in XML. XML parser will
	  generate structure instances based on this data structure
	  3. ftb_event_search - hash table to search an event and return
	  event attributes.
	  4. mpich_events.xml - The new format of XML file. This will also
	  be removed in a couple of days and moved to an appropriate
	  location.
	  5. parser.pl - Perl parser that generates the throw_events.h file

2007-08-20 18:55  qgao

	* [r257] Some code update

2007-08-20 15:59  rgupta

	* [r256] Added new xml perl parser. Requires perl-dom files.

2007-08-16 02:31  qgao

	* [r255] Check-in the new code base. Many parts are still under
	  testing.

2007-08-16 02:28  qgao

	* [r254] SVN cleanup before check-in new code

2007-08-06 16:29  qgao

	* [r237] Update definitions in header files. Note interfaces are
	  still being
	  defined.

2007-08-03 15:49  qgao

	* [r227] Reorganize the code into 3 layers and move BGL client to
	  client_lib dir

2007-08-03 15:43  qgao

	* [r226] Change the name of ftb core to ftb manager some cleanup

2007-08-03 15:36  qgao

	* [r225] Adding definitions of FTB_event_catching_t and
	  FTB_err_handling_t to
	  specifiy the component requirements for FTB. Resource trade-offs
	  are
	  also mentioned.
	  (See the definitions in file for details)

2007-08-02 04:00  qgao

	* [r223] Adding initial BGL support part ftb_wrapper and ftb_agent
	  based on zoid

2007-08-02 03:30  qgao

	* [r222] Remove old demo source code, since they are no longer
	  compatible

2007-08-02 03:29  qgao

	* [r221] Since Rinku has created the new branch for the initial
	  demo code. I can
	  start checking in the code I've been working on.
	  Note it is only development code, some are not at all tested and
	  very
	  likely containing errors. Also it will be evolving quickly.
	  
	  This check-in:
	  Redefine header files, adding layered structure

2007-07-31 21:19  rgupta

	* [r216] Adding bin lib temporarily to make Qi's demo code work

2007-07-31 20:57  rgupta

	* [r215] Added some more files and directories from ftb demo

2007-07-31 20:55  rgupta

	* [r214] Added the ftb demo to trunk and re-irganized files

2007-07-31 19:37  rgupta

	* [r213] Deleted these empty directories for now - will copy them
	  from ftb_demo

2007-07-14 16:11  rgupta

	* [r187] New layout for FTB trunk.

2007-07-14 15:59  rgupta

	* [r185] Moving the README to trunk.

2007-07-14 15:59  rgupta

	* [r184] Moving the XML parser to trunk.

2007-07-14 15:56  rgupta

	* [r180] Added trunk.

