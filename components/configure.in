#*******************************************************************************
#  This file is part of FTB (Fault Tolerance Backplance) - the core of CIFTS
#  (Co-ordinated Infrastructure for Fault Tolerant Systems)
#  
#  See http://www.mcs.anl.gov/research/cifts for more information.
#  	
#  This software is licensed under BSD. See the file FTB/misc/license.BSD for
#  complete details on your rights to copy, modify, and use this software.
#*******************************************************************************

dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT()

AC_PREFIX_DEFAULT('/usr/local')
saveCFLAGS=$CFLAGS
AC_PROG_CC
CFLAGS=$saveCFLAGS

dnl Get the FTB home directory
AC_ARG_WITH(ftb, [  --with-ftb=<install dir> Absolute path name pointing to the FTB installation directory [Default:/usr/local/ftb]],
	    FTB_HOME=$withval, FTB_HOME='/usr/local/ftb')
AC_MSG_CHECKING(checking ftb install directory)
AC_MSG_RESULT($FTB_HOME)
dnl if test "$FTB_HOME" == ""; then
dnl	echo "FTB install directory needed";
dnl	echo "./configure aborted";
dnl	exit 1;
dnl fi

dnl Expose option for platform type
AC_ARG_WITH(platform, [  --with-platform=<platform type>        Possible values: bgl, bgp, linux],
	                          CLIENTS=$withval, CLIENTS=linux)
AC_MSG_CHECKING(checking platform support)
AC_MSG_RESULT($CLIENTS)

FTB_LIB_LINUX_NAME=ftb
if  test "$CLIENTS" == "linux"; then
	clients="linux";
elif [[ "$CLIENTS" == "bgl" ]] || [[ "$CLIENTS" == "bgp" ]]; then
	if [[ "$CLIENTS" == "bgl" ]]; then
	    clients="bgl linux";
	elif [[ "$CLIENTS" == "bgp" ]]; then
	    clients="bgp linux";
	fi
	unset_var=0;
	ZOID_CLIENT_DIR='${abs_top_srcdir}/src/client_lib/platforms/bg/zoid_client';
	FTB_LIB_BG_CN_NAME=ftb_blrts
	if [[ -f "$ENVFILE" ]]; then
		BG_ENVFILE="$ENVFILE";
	else
		BG_ENVFILE="../bg_setup_env";
	fi
	if test ! -r "$BG_ENVFILE" ; then
		echo "error: BG environment file '$BG_ENVFILE' does not exist or is not readable";
		echo "configure script aborting...correct errors first"
		exit 1;
	else
		source $BG_ENVFILE;
	fi
	if test -z "$ZOID_HOME"; then
		unset_var=1;
		echo "error: Required environment variable not set: ZOID_HOME. Please check BG environment variables file." >&2;
	else
		ZOID_HOME="export ZOID_HOME=$ZOID_HOME";
	fi
	if test -z "$ZOID_LIBC_PATH"; then
		unset_var=1;
		echo "error: Required environment variable not set: ZOID_LIBC_PATH. Please check BG environment variables file." >&2;
	else
		ZOID_LIBC_PATH="export ZOID_LIBC_PATH=$ZOID_LIBC_PATH";
	fi
	if test -z "$CC_BLRTS"; then
		unset_var=1;
		echo "error: Required enviroment variable not ste: CC_BLRTS. Please check BG environment variables file.";
	else
		CC_BLRTS="export CC_BLRTS=$CC_BLRTS";
	fi
	if test -z "$AR_BLRTS"; then
		unset_var=1;
		echo "error: Required enviroment variable not ste: AR_BLRTS. Please check BG environment variables file.";
	else
		AR_BLRTS="export AR_BLRTS=$AR_BLRTS";
	fi
	if test -z "$BGSYS_LIB_PATH"; then
		unset_var=1;
		echo "error: Required environment variable not set: BGSYS_LIB_PATH. Please check BG environment variables file." >&2;
	else
		BGSYS_LIB_PATH="export BGSYS_LIB_PATH=$BGSYS_LIB_PATH";
	fi
	if test $unset_var == 1; then
		echo "configure script aborting...correct errors first" >&2;
		exit 1;
	fi
fi

dnl Setup some default variables that will be useful in lower Maekfiles
network="sock";
FTB_LIB_PATH_SHARED='${FTB_HOME}/lib';
FTB_LIB_PATH_STATIC='${FTB_HOME}/lib';
FTB_INC_DIR='${FTB_HOME}/include';
LIBS_PTHREAD='-lpthread';

AC_SUBST(ZOID_HOME)
AC_SUBST(ZOID_LIBC_PATH)
AC_SUBST(CC_BLRTS)
AC_SUBST(AR_BLRTS)
AC_SUBST(BGSYS_LIB_PATH)
AC_SUBST(clients)
AC_SUBST(ZOID_CLIENT_DIR)
AC_SUBST(FTB_HOME)
AC_SUBST(FTB_LIB_LINUX_NAME)
AC_SUBST(FTB_LIB_PATH_SHARED)
AC_SUBST(FTB_LIB_PATH_STATIC)
AC_SUBST(FTB_INC_DIR)
AC_SUBST(LIBS_PTHREAD)
AC_OUTPUT(Makefile \
	  examples/Makefile)

