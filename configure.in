dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT()
AC_CONFIG_HEADERS(include/config.h)

AC_PREFIX_DEFAULT('/usr/local')
saveCFLAGS=$CFLAGS
AC_PROG_CC
CFLAGS=$saveCFLAGS
AC_PROG_RANLIB

dnl Get bootstrap server name
AC_ARG_WITH(bstrap-server, [  --with-bstrap-server=<IP Address>     IP Address of Bootstrapping server <no default>],
	                 FTB_BSTRAP_SERVER=$withval)
AC_MSG_CHECKING(checking bootstrap server IP Address)
AC_MSG_RESULT($FTB_BSTRAP_SERVER)
if test "$FTB_BSTRAP_SERVER" != ""; then
	AC_DEFINE_UNQUOTED(FTB_BSTRAP_SERVER, "${FTB_BSTRAP_SERVER}", [Hostname for the FTB bootstrap server])
fi

dnl Get bootstrap server port number
AC_ARG_WITH(bstrap-port, [  --with-bstrap-port=<port number>	Port number of Bootstrapping server <14455>],
	                 FTB_BSTRAP_PORT=$withval, FTB_BSTRAP_PORT=14455)
AC_MSG_CHECKING(checking bootstrap server port number)
AC_MSG_RESULT($FTB_BSTRAP_PORT)
AC_DEFINE_UNQUOTED(FTB_BSTRAP_PORT, ${FTB_BSTRAP_PORT}, [Port number for the FTB bootstrap server])

dnl Get agent port number
AC_ARG_WITH(agent-port, [  --with-agent-port=<port number>	Port number on which agent is running <10809>],
			FTB_AGENT_PORT=$withval, FTB_AGENT_PORT=10809)
AC_MSG_CHECKING(checking agent port number)
AC_MSG_RESULT($FTB_AGENT_PORT)
AC_DEFINE_UNQUOTED(FTB_AGENT_PORT, ${FTB_AGENT_PORT}, [FTB Agent port])


dnl Expose option for platform type
AC_ARG_WITH(platform, [  --with-platform=<platform type>	Possible values: bgl, bgp, linux],
 		      CLIENTS=$withval, CLIENTS=linux)
AC_MSG_CHECKING(checking platform support)
AC_MSG_RESULT($CLIENTS)

dnl Expose option for BGL enviroment file
AC_ARG_WITH(platform-envfile, [  --with-platform-envfile=<bg envfile>	Default file is bg_setup_env for BGL and BGP
					platforms. For all other platforms, this file
					is ignored.],
			ENVFILE=$withval, ENVFILE=)
AC_MSG_CHECKING(user specified platform environment file)
AC_MSG_RESULT($ENVFILE)

AC_ARG_ENABLE(debug, [  --enable-debug: To enable debug messages. Default is no debug], FTB_DEBUG=$enableval, FTB_DEBUG=no)
AC_MSG_CHECKING(debug log directory)
AC_MSG_RESULT($FTB_DEBUG)
if [[ "$FTB_DEBUG" != "no" ]]; then
   AC_DEFINE(FTB_DEBUG,, [FTB Debug definition])
   AC_DEFINE_UNQUOTED(FTB_LOGDIR,"${FTB_DEBUG}", [FTB Log Directory])
fi


FTB_LIB_LINUX_NAME=ftb
if  test "$CLIENTS" == "linux"; then
	clients="linux";
elif [[ "$CLIENTS" == "bgl" ]] || [[ "$CLIENTS" == "bgp" ]]; then
	clients="bg linux";
	unset_var=0;
	ZOID_CLIENT_DIR='${abs_top_srcdir}/src/client_lib/platforms/bg/zoid_client';
	FTB_LIB_BG_CN_NAME=ftb_blrts
	if test "$ENVFILE" == ""; then
		BG_ENVFILE="bg_setup_env";
	else
		BG_ENVFILE="$ENVFILE";
	fi
	if test ! -r "$BG_ENVFILE" ; then
		echo "error: BG environment file '$BG_ENVFILE' does not exist or is not readable";
		echo "configure script aborting...correct errors first"
		exit 1;
	else
		source $BG_ENVFILE;
	fi
	if [[ "$CLIENTS" == "bgl" ]]; then
		PLATFORM="bgl";
	elif [[ "$CLIENTS" == "bgp" ]]; then
		PLATFORM="bgp";
	fi
	if test -z "$ZOID_HOME"; then
		unset_var=1;
		echo "error: Required environment variable not set: ZOID_HOME. Please check BG environment variables file." >&2;
	else
		ZOID_HOME="export ZOID_HOME=$ZOID_HOME";
	fi
	if test -z "$ZOID_LIBC_PATH"; then
		unset_var=1;
		echo "error: Required environment variable not set: ZOID_LIBC_PATH. Please check BG environment variables file." >&2;
	else
		ZOID_LIBC_PATH="export ZOID_LIBC_PATH=$ZOID_LIBC_PATH";
	fi
	if test -z "$BLRTS_PATH"; then
		unset_var=1;
		echo "error: Required environment variable not set: BLRTS_PATH. Please check BG environment variables file." >&2;
	else
		BLRTS_PATH="export BLRTS_PATH=$BLRTS_PATH";
	fi
	if test -z "$CC_BLRTS"; then
		unset_var=1;
		echo "error: Required enviroment variable not ste: CC_BLRTS. Please check BG environment variables file.";
	else
		CC_BLRTS="export CC_BLRTS=$CC_BLRTS";
	fi
	if test -z "$AR_BLRTS"; then
		unset_var=1;
		echo "error: Required enviroment variable not ste: AR_BLRTS. Please check BG environment variables file.";
	else
		AR_BLRTS="export AR_BLRTS=$AR_BLRTS";
	fi
	if test -z "$RANLIB_BLRTS"; then
		unset_var=1;
		echo "error: Required enviroment variable not ste: RANLIB_BLRTS. Please check BG environment variables file.";
	else
		RANLIB_BLRTS="export RANLIB_BLRTS=$RANLIB_BLRTS";
	fi
	if test -z "$BGSYS_LIB_PATH"; then
		unset_var=1;
		echo "error: Required environment variable not set: BGSYS_LIB_PATH. Please check BG environment variables file." >&2;
	else
		BGSYS_LIB_PATH="export BGSYS_LIB_PATH=$BGSYS_LIB_PATH";
	fi
	if test $unset_var == 1; then
		echo "configure script aborting...correct errors first" >&2;
		exit 1;
	fi
fi

dnl Setup some default variables that will be useful in lower Maekfiles
network="sock";
FTB_NETWORK_CFLAG="-DFTB_NETWORK_SOCK";
TEMPSBIN='${abs_top_srcdir}/sbin';
TEMPLIB='${abs_top_srcdir}/lib';
FTB_LIB_PATH_SHARED='${TEMPLIB}';
FTB_LIB_PATH_STATIC='${TEMPLIB}';
INC_DIR='${abs_top_srcdir}/include';
AR='ar';
LIBS_PTHREAD='-lpthread';
MAKE='make'
CFLAGS_FTB='-Wall -g -fPIC -I${INC_DIR}';
CFLAGS_SRC='${CFLAGS_FTB} -I${abs_top_srcdir}/src/include -I${abs_top_srcdir}/src/manager_lib/include'
UTIL_OBJ='${abs_top_srcdir}/src/util/ftb_util.o'
AUXIL_OBJ='${abs_top_srcdir}/src/util/ftb_auxil.o'
MANAGER_LIB_PATH_SHARED='${abs_top_srcdir}/src/manager_lib/lib/shared'
MANAGER_LIB_PATH_STATIC='${abs_top_srcdir}/src/manager_lib/lib/static'
MANAGER_LIB_NAME=ftbm
CFLAGS_CLIENT='${CFLAGS_SRC} -I${abs_top_srcdir}/src/client_lib/include'
CLIENT_LIB_OBJ='${abs_top_srcdir}/src/client_lib/ftb_client_lib.o'
CFLAGS_MANAGER='${CFLAGS_SRC} -I${abs_top_srcdir}/src/manager_lib/network/include -I${abs_top_srcdir}/src/manager_lib/network/network_${network}/include ${FTB_NETWORK_CFLAG}  -I${abs_top_srcdir}/src/manager_lib/include'


AC_SUBST(ZOID_HOME)
AC_SUBST(ZOID_LIBC_PATH)
AC_SUBST(BLRTS_PATH)
AC_SUBST(CC_BLRTS)
AC_SUBST(AR_BLRTS)
AC_SUBST(RANLIB_BLRTS)
AC_SUBST(BGSYS_LIB_PATH)
AC_SUBST(BGL_ENVFILE)
AC_SUBST(clients)
AC_SUBST(PLATFORM)
AC_SUBST(FTB_NETWORK_CFLAG)
AC_SUBST(network)
AC_SUBST(TEMPSBIN)
AC_SUBST(TEMPLIB)
AC_SUBST(ZOID_CLIENT_DIR)
AC_SUBST(FTB_LIB_BG_CN_NAME)
AC_SUBST(FTB_LIB_LINUX_NAME)
AC_SUBST(FTB_LIB_PATH_SHARED)
AC_SUBST(FTB_LIB_PATH_STATIC)
AC_SUBST(INC_DIR)
AC_SUBST(AR)
AC_SUBST(CFLAGS_FTB)
AC_SUBST(CFLAGS_SRC)
AC_SUBST(UTIL_OBJ)
AC_SUBST(MANAGER_LIB_PATH_SHARED)
AC_SUBST(MANAGER_LIB_PATH_STATIC)
AC_SUBST(MANAGER_LIB_NAME)
AC_SUBST(CFLAGS_CLIENT)
AC_SUBST(CLIENT_LIB_OBJ)
AC_SUBST(CFLAGS_MANAGER)
AC_SUBST(LIBS_PTHREAD)
AC_SUBST(MAKE)
AC_OUTPUT(Makefile 								\
	  src/Makefile 								\
	  src/util/Makefile							\
	  src/manager_lib/Makefile						\
	  src/manager_lib/network/network_sock/Makefile				\
	  src/client_lib/Makefile 						\
	  src/client_lib/platforms/Makefile 					\
	  src/client_lib/platforms/linux/Makefile 				\
	  src/client_lib/platforms/bg/Makefile 					\
	  src/client_lib/platforms/bg/zoid_client/Makefile 			\
	  src/client_lib/platforms/bg/zoid_client/implementation/Makefile	\
	  src/client_lib/platforms/bg/zoid_client/client/Makefile		\
	  src/client_lib/platforms/bg/zoid_client/server/Makefile		\
	  src/agent/Makefile)

