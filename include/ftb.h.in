/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*******************************************/
/* FTB:ftb-info */
/* This file is part of FTB (Fault Tolerance Backplance) - the core of CIFTS
 * (Co-ordinated Infrastructure for Fault Tolerant Systems)
 *
 * See http://www.mcs.anl.gov/research/cifts for more information.
 * 	
 */
/* FTB:ftb-info */

/* FTB:ftb-fillin */
/* FTB_Version: 0.6.2
 * FTB_API_Version: 0.5
 * FTB_Heredity:FOSS_ORIG
 * FTB_License:BSD
 */
/* FTB:ftb-fillin */

/* FTB:ftb-bsd */
/* This software is licensed under BSD. See the file FTB/misc/license.BSD for
 * complete details on your rights to copy, modify, and use this software.
 */
/* FTB:ftb-bsd */
/***********************************************************************************/

#ifndef HAVE_FTB_H
#define HAVE_FTB_H

#include "ftb_def.h"

/* *INDENT-OFF* */
#ifdef __cplusplus
extern "C" {
#endif
/* *INDENT-ON* */

int FTB_Connect(const FTB_client_t * client_info, FTB_client_handle_t * client_handle);

int FTB_Publish(FTB_client_handle_t client_handle, const char *event_name,
                const FTB_event_properties_t * event_properties, FTB_event_handle_t * event_handle);

int FTB_Subscribe(FTB_subscribe_handle_t * subscribe_handle, FTB_client_handle_t client_handle,
                  const char *subscription_str, int (*callback) (FTB_receive_event_t *, void *),
                  void *arg);

int FTB_Unsubscribe(FTB_subscribe_handle_t * subscribe_handle);

int FTB_Declare_publishable_events(FTB_client_handle_t client_handle, const char *schema_file,
                                   const FTB_event_info_t * event_info, int num_events);

int FTB_Poll_event(FTB_subscribe_handle_t shandle, FTB_receive_event_t * receive_event);

int FTB_Disconnect(FTB_client_handle_t client_handle);

int FTB_Get_event_handle(const FTB_receive_event_t receive_event, FTB_event_handle_t * event_handle);

int FTB_Compare_event_handles(const FTB_event_handle_t event_handle1,
                              const FTB_event_handle_t event_handle2);

int FTB_Check_error_code(const int error_code, int *error_class, int *error_value);

/*
 * The version code is taken from the MPICH2 software package from
 * Argonne National Laboratory.
 * Produce a numeric version assuming the following format:
 * Version: [MAJ].[MIN].[REV][EXT][EXT_NUMBER]
 * Example: 0.6.1rc1 has
 *          MAJ = 0
 *          MIN = 6
 *          REV = 1
 *          EXT = rc
 *          EXT_NUMBER = 1
 *
 * Converting to numeric version will convert EXT to a format number:
 *          ALPHA (a) = 0
 *          BETA (b)  = 1
 *          RC (rc)   = 2
 *          PATCH (p) = 3
 * Regular releases are treated as patch 0
 *
 * Numeric version will have 1 digit for MAJ, 2 digits for MIN,
 * 2 digits for REV, 1 digit for EXT and 2 digits for EXT_NUMBER.
 */
#define FTB_VERSION "@FTB_VERSION@"
#define FTB_NUMVERSION @FTB_NUMVERSION@

#define FTB_RELEASE_TYPE_ALPHA  0
#define FTB_RELEASE_TYPE_BETA   1
#define FTB_RELEASE_TYPE_RC     2
#define FTB_RELEASE_TYPE_PATCH  3

#define FTB_CALC_VERSION(MAJOR, MINOR, REVISION, TYPE, PATCH) \
  (((MAJOR) * 10000000) + ((MINOR) * 100000) + ((REVISION) * 1000) + ((TYPE) * 100) + (PATCH))


/* *INDENT-OFF* */
#ifdef __cplusplus
} /*extern "C"*/
#endif
/* *INDENT-ON* */

#endif /* HAVE_FTB_H */
